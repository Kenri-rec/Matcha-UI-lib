--[[
Matcha UI Library - Drawing-based UI for Roblox Executors
Based on x11-colorpicker.lua structure

UILib.new(<string> identity, <Vector2> size, <table> watermarkActivity) -> UILib

UILib:Tab(<string> name) -> tabName
UILib:Section(<tabName>, <string> name) -> sectionName
UILib:CreateSettingsTab(<string> customName) -> tabName, sectionName, sectionName

UILib:Checkbox(<tabName>, <sectionName>, <string> label, <boolean> defaultValue, <function> callback)
UILib:Slider(<tabName>, <sectionName>, <string> label, <number> defaultValue, <function> callback, <number> min, <number> max, <number> step, <string> appendix)
UILib:Choice(<tabName>, <sectionName>, <string> label, <table> defaultValue, <function | nil> callback, <table> choices, <boolean> multi)
UILib:Colorpicker(<tabName>, <sectionName>, <string> label, <table[3]> defaultValue, <function | nil> callback)
UILib:Keybind(<tabName>, <sectionName>, <string> label, <string(Keycode)> defaultValue, <function | nil> callback, <string: 'Hold', 'Toggle', 'Always'> mode)
UILib:Button(<tabName>, <sectionName>, <string> label, <function> callback)

UILib:ToggleMenu(boolean)
UILib:ToggleWatermark(boolean)
UILib:Step()
UILib:Destroy()
]]--

UILib = {}
UILib.__index = UILib

ESP_FONTSIZE = 7
BLACK = Color3.new(0, 0, 0)

local function clamp(x, a, b)
    return math.max(a, math.min(b, x))
end

local function lerp(a, b, t)
    return a + (b - a) * t
end

local function color3fromHSV(h, s, v)
    local i = math.floor(h * 6)
    local f = h * 6 - i
    local p = v * (1 - s)
    local q = v * (1 - f * s)
    local t = v * (1 - (1 - f) * s)
    i = i % 6

    local r, g, b
    if i == 0 then r, g, b = v, t, p
    elseif i == 1 then r, g, b = q, v, p
    elseif i == 2 then r, g, b = p, v, t
    elseif i == 3 then r, g, b = p, q, v
    elseif i == 4 then r, g, b = t, p, v
    else r, g, b = v, p, q end

    return Color3.new(r, g, b)
end

local function getMousePos()
    local player = game:GetService('Players').LocalPlayer
    local mouse = player:GetMouse()
    return Vector2.new(mouse.X, mouse.Y)
end

local function destroyAllDrawings(drawingsTable)
    for _, drawing in ipairs(drawingsTable) do
        drawing:Remove()
    end
end

local function undrawAll(drawingsTable)
    for _, drawing in pairs(drawingsTable) do
        drawing.Visible = false
    end
end

function UILib.new(name, size, watermarkActivity)
    local self = setmetatable({}, UILib)

    repeat
        wait(1/9999)
    until isrbxactive and isrbxactive()

    self._inputs = {
        ['m1'] = { id = 0x01, held = false, click = false },
        ['m2'] = { id = 0x02, held = false, click = false },
        ['mb'] = { id = 0x04, held = false, click = false },
        ['tab'] = { id = 0x09, held = false, click = false },
        ['enter'] = { id = 0x0D, held = false, click = false },
        ['shift'] = { id = 0x10, held = false, click = false },
        ['ctrl'] = { id = 0x11, held = false, click = false },
        ['alt'] = { id = 0x12, held = false, click = false },
        ['space'] = { id = 0x20, held = false, click = false },
        ['left'] = { id = 0x25, held = false, click = false },
        ['up'] = { id = 0x26, held = false, click = false },
        ['right'] = { id = 0x27, held = false, click = false },
        ['down'] = { id = 0x28, held = false, click = false },
        ['0'] = { id = 0x30, held = false, click = false },
        ['1'] = { id = 0x31, held = false, click = false },
        ['2'] = { id = 0x32, held = false, click = false },
        ['3'] = { id = 0x33, held = false, click = false },
        ['4'] = { id = 0x34, held = false, click = false },
        ['5'] = { id = 0x35, held = false, click = false },
        ['6'] = { id = 0x36, held = false, click = false },
        ['7'] = { id = 0x37, held = false, click = false },
        ['8'] = { id = 0x38, held = false, click = false },
        ['9'] = { id = 0x39, held = false, click = false },
        ['a'] = { id = 0x41, held = false, click = false },
        ['b'] = { id = 0x42, held = false, click = false },
        ['c'] = { id = 0x43, held = false, click = false },
        ['d'] = { id = 0x44, held = false, click = false },
        ['e'] = { id = 0x45, held = false, click = false },
        ['f'] = { id = 0x46, held = false, click = false },
        ['g'] = { id = 0x47, held = false, click = false },
        ['h'] = { id = 0x48, held = false, click = false },
        ['i'] = { id = 0x49, held = false, click = false },
        ['j'] = { id = 0x4A, held = false, click = false },
        ['k'] = { id = 0x4B, held = false, click = false },
        ['l'] = { id = 0x4C, held = false, click = false },
        ['m'] = { id = 0x4D, held = false, click = false },
        ['n'] = { id = 0x4E, held = false, click = false },
        ['o'] = { id = 0x4F, held = false, click = false },
        ['p'] = { id = 0x50, held = false, click = false },
        ['q'] = { id = 0x51, held = false, click = false },
        ['r'] = { id = 0x52, held = false, click = false },
        ['s'] = { id = 0x53, held = false, click = false },
        ['t'] = { id = 0x54, held = false, click = false },
        ['u'] = { id = 0x55, held = false, click = false },
        ['v'] = { id = 0x56, held = false, click = false },
        ['w'] = { id = 0x57, held = false, click = false },
        ['x'] = { id = 0x58, held = false, click = false },
        ['y'] = { id = 0x59, held = false, click = false },
        ['z'] = { id = 0x5A, held = false, click = false },
        ['f1'] = { id = 0x70, held = false, click = false },
        ['f2'] = { id = 0x71, held = false, click = false },
        ['f3'] = { id = 0x72, held = false, click = false },
        ['f4'] = { id = 0x73, held = false, click = false },
        ['f5'] = { id = 0x74, held = false, click = false },
        ['f6'] = { id = 0x75, held = false, click = false },
        ['f7'] = { id = 0x76, held = false, click = false },
        ['f8'] = { id = 0x77, held = false, click = false },
        ['f9'] = { id = 0x78, held = false, click = false },
        ['f10'] = { id = 0x79, held = false, click = false },
        ['f11'] = { id = 0x7A, held = false, click = false },
        ['f12'] = { id = 0x7B, held = false, click = false },
    }

    self._active_tab = nil
    self._open = true
    self._watermark = true
    self._base_opacity = 0
    self._dragging = false
    self._drag_offset = Vector2.new(0, 0)
    self._active_dropdown = nil
    self._active_colorpicker = nil
    self._clipboard_color = nil
    self._tick = os.clock()

    self.identity = name
    self._watermark_activity = watermarkActivity or {}
    self.x = 20
    self.y = 60
    self.w = size and size.x or 300
    self.h = size and size.y or 400

    self._color_accent = Color3.fromRGB(255, 127, 0)
    self._color_text = Color3.fromRGB(255, 255, 255)
    self._color_crust = Color3.fromRGB(0, 0, 0)
    self._color_border = Color3.fromRGB(25, 25, 25)
    self._color_surface = Color3.fromRGB(38, 38, 38)
    self._color_overlay = Color3.fromRGB(76, 76, 76)

    self._title_h = 25
    self._tab_h = 20
    self._padding = 6
    self._gradient_detail = 80

    local base = Drawing.new('Square')
    base.Filled = true
    base.Color = self._color_surface

    local crust = Drawing.new('Square')
    crust.Filled = false
    crust.Thickness = 1
    crust.Color = self._color_crust

    local border = Drawing.new('Square')
    border.Filled = false
    border.Thickness = 1
    border.Color = self._color_border

    local navbar = Drawing.new('Square')
    navbar.Filled = true
    navbar.Color = self._color_border

    local title = Drawing.new('Text')
    title.Text = self.identity
    title.Outline = true
    title.Color = self._color_text

    local watermarkBase = Drawing.new('Square')
    watermarkBase.Filled = true
    watermarkBase.Color = self._color_surface

    local watermarkCursor = Drawing.new('Square')
    watermarkCursor.Filled = true
    watermarkCursor.Color = self._color_accent

    local watermarkCrust = Drawing.new('Square')
    watermarkCrust.Filled = false
    watermarkCrust.Thickness = 1
    watermarkCrust.Color = self._color_crust

    local watermarkBorder = Drawing.new('Square')
    watermarkBorder.Filled = false
    watermarkBorder.Thickness = 1
    watermarkBorder.Color = self._color_border

    local watermarkText = Drawing.new('Text')
    watermarkText.Text = name
    watermarkText.Outline = true
    watermarkText.Color = self._color_text

    self._tree = {
        ['_tabs'] = {},
        ['_drawings'] = { crust, border, base, navbar, title, watermarkBase, watermarkCursor, watermarkCrust, watermarkBorder, watermarkText }
    }

    return self
end

function UILib._GetTextBounds(str)
    return #str * ESP_FONTSIZE, ESP_FONTSIZE
end

function UILib._IsMouseWithinBounds(origin, size)
    local mousePos = getMousePos()
    return mousePos.x >= origin.x and mousePos.x <= origin.x + size.x and mousePos.y >= origin.y and mousePos.y <= origin.y + size.y
end

function UILib:_RemoveDropdown()
    if self._active_dropdown then
        destroyAllDrawings(self._active_dropdown['_drawings'])
        self._active_dropdown = nil
    end
end

function UILib:_RemoveColorpicker()
    if self._active_colorpicker then
        destroyAllDrawings(self._active_colorpicker['_drawings'])
        self._active_colorpicker = nil
    end
end

function UILib:_SpawnDropdown(default, choices, multi, callback, position, width)
    if self._active_dropdown then
        self:_RemoveDropdown()
    end

    local base = Drawing.new('Square')
    base.Filled = true
    base.Color = self._color_surface

    local crust = Drawing.new('Square')
    crust.Filled = false
    crust.Thickness = 1
    crust.Color = self._color_crust

    local border = Drawing.new('Square')
    border.Filled = false
    border.Thickness = 1
    border.Color = self._color_border

    local drawings = { base, crust, border }
    for _, entryValue in ipairs(choices) do
        local entry = Drawing.new('Text')
        entry.Outline = true
        entry.Color = self._color_text
        entry.Text = entryValue
        table.insert(drawings, entry)
    end

    local choiceHash = {}
    for _, choice in ipairs(choices) do
        choiceHash[choice] = false
    end

    for _, default_ in ipairs(default) do
        choiceHash[default_] = true
    end

    self._active_dropdown = {
        ['choices'] = choiceHash,
        ['multi'] = multi,
        ['callback'] = callback,
        ['position'] = position,
        ['w'] = width,
        ['_drawings'] = drawings
    }
end

function UILib:_SpawnColorpicker(default, colorLabel, callback)
    if self._active_colorpicker then
        self:_RemoveColorpicker()
    end

    local base = Drawing.new('Square')
    base.Filled = true
    base.Color = self._color_surface

    local crust = Drawing.new('Square')
    crust.Filled = false
    crust.Thickness = 1
    crust.Color = self._color_crust

    local border = Drawing.new('Square')
    border.Filled = false
    border.Thickness = 1
    border.Color = self._color_border

    local titleBar = Drawing.new('Square')
    titleBar.Filled = true
    titleBar.Color = self._color_border

    local label = Drawing.new('Text')
    label.Outline = true
    label.Color = self._color_text
    label.Text = colorLabel

    local drawings = { base, crust, border, titleBar, label }

    for _ = 1, self._gradient_detail * 3 do
        local segment = Drawing.new('Square')
        segment.Filled = true
        table.insert(drawings, segment)
    end

    local cursorCrustPrimary = Drawing.new('Circle')
    cursorCrustPrimary.Filled = false
    cursorCrustPrimary.Thickness = 3
    cursorCrustPrimary.Radius = 6
    cursorCrustPrimary.NumSides = 20
    cursorCrustPrimary.Color = self._color_crust

    local cursorBasePrimary = Drawing.new('Circle')
    cursorBasePrimary.Filled = false
    cursorBasePrimary.Thickness = 1
    cursorBasePrimary.Radius = 6
    cursorBasePrimary.NumSides = 20
    cursorBasePrimary.Color = self._color_border

    local cursorBaseSecondary = Drawing.new('Square')
    cursorBaseSecondary.Filled = true
    cursorBaseSecondary.Color = self._color_border

    local cursorBorderSecondary = Drawing.new('Square')
    cursorBorderSecondary.Filled = false
    cursorBorderSecondary.Thickness = 1
    cursorBorderSecondary.Color = self._color_surface

    local cursorCrustSecondary = Drawing.new('Square')
    cursorCrustSecondary.Filled = false
    cursorCrustSecondary.Thickness = 1
    cursorCrustSecondary.Color = self._color_crust

    for _, cursor in ipairs{cursorBasePrimary, cursorCrustPrimary, cursorBaseSecondary, cursorCrustSecondary, cursorBorderSecondary} do
        table.insert(drawings, cursor)
    end

    self._active_colorpicker = {
        ['callback'] = callback,
        ['_pallete_pos'] = nil,
        ['_slider_y'] = 0,
        ['_drawings'] = drawings
    }
end

function UILib:ToggleWatermark(state)
    self._watermark = state
end

function UILib:ToggleMenu(state)
    self._open = state
end

function UILib:IsMenuOpen()
    return self._open
end

function UILib:Tab(name)
    local backdrop = Drawing.new('Square')
    backdrop.Color = self._color_border
    backdrop.Filled = true

    local shadow = Drawing.new('Square')
    shadow.Color = BLACK
    shadow.Filled = true

    local cursor = Drawing.new('Square')
    cursor.Color = self._color_accent
    cursor.Filled = true

    local text = Drawing.new('Text')
    text.Color = self._color_text
    text.Outline = true
    text.Text = name

    table.insert(self._tree['_tabs'], {
        ['name'] = name,
        ['_sections'] = {},
        ['_drawings'] = { backdrop, shadow, cursor, text }
    })

    if self._active_tab == nil then
        self._active_tab = name
    end

    return name
end

function UILib:Section(tabName, name)
    for _, tab in ipairs(self._tree['_tabs']) do
        if tab['name'] == tabName then
            local base = Drawing.new('Square')
            base.Filled = true
            base.Color = self._color_surface

            local crust = Drawing.new('Square')
            crust.Filled = false
            crust.Thickness = 1
            crust.Color = self._color_crust

            local border = Drawing.new('Square')
            border.Filled = false
            border.Thickness = 1
            border.Color = self._color_overlay

            local title = Drawing.new('Text')
            title.Text = name
            title.Outline = true
            title.Color = self._color_text

            local section = {
                ['name'] = name,
                ['_items'] = {},
                ['_drawings'] = { base, crust, border, title }
            }

            table.insert(tab._sections, section)
            return name
        end
    end
end

function UILib:_AddToSection(tabName, sectionName, itemType, value, callback, drawings, meta)
    for _, tab in pairs(self._tree._tabs) do
        if tab.name == tabName then
            for _, section in pairs(tab._sections) do
                if section.name == sectionName then
                    local item = {
                        ['type'] = itemType,
                        ['value'] = value,
                        ['callback'] = callback,
                        ['_drawings'] = drawings
                    }

                    if meta then
                        for key, val in pairs(meta) do
                            item[key] = val
                        end
                    end

                    table.insert(section._items, item)
                    return
                end
            end
        end
    end
end

function UILib:Checkbox(tabName, sectionName, label, defaultValue, callback)
    local outline = Drawing.new('Square')
    outline.Color = self._color_crust
    outline.Thickness = 1
    outline.Filled = false

    local check = Drawing.new('Square')
    check.Color = self._color_accent
    check.Filled = true

    local checkShadow = Drawing.new('Square')
    checkShadow.Color = BLACK
    checkShadow.Filled = true

    local text = Drawing.new('Text')
    text.Color = self._color_text
    text.Outline = true
    text.Text = label

    self:_AddToSection(tabName, sectionName, 'checkbox', defaultValue, callback, {
        outline, check, checkShadow, text
    })
end

function UILib:Slider(tabName, sectionName, label, defaultValue, callback, min, max, step, appendix)
    local outline = Drawing.new('Square')
    outline.Color = self._color_crust
    outline.Filled = true

    local fill = Drawing.new('Square')
    fill.Color = self._color_accent
    fill.Filled = true

    local fillShadow = Drawing.new('Square')
    fillShadow.Color = BLACK
    fillShadow.Filled = true

    local value = Drawing.new('Text')
    value.Color = self._color_text
    value.Outline = true

    local text = Drawing.new('Text')
    text.Color = self._color_text
    text.Outline = true
    text.Text = label

    self:_AddToSection(tabName, sectionName, 'slider', defaultValue, callback, {
        outline, fill, fillShadow, value, text
    }, {
        ['min'] = min,
        ['max'] = max,
        ['step'] = step,
        ['appendix'] = appendix
    })
end

function UILib:Choice(tabName, sectionName, label, defaultValue, callback, choices, multi)
    local outline = Drawing.new('Square')
    outline.Color = self._color_crust
    outline.Thickness = 1
    outline.Filled = false

    local fill = Drawing.new('Square')
    fill.Color = self._color_crust
    fill.Filled = true

    local values = Drawing.new('Text')
    values.Color = self._color_text
    values.Outline = true

    local expand = Drawing.new('Text')
    expand.Color = self._color_text
    expand.Outline = true
    expand.Text = "-"

    local text = Drawing.new('Text')
    text.Color = self._color_text
    text.Outline = true
    text.Text = label

    self:_AddToSection(tabName, sectionName, 'choice', defaultValue, callback, {
        outline, fill, values, expand, text
    }, {
        ['choices'] = choices,
        ['multi'] = multi
    })
end

function UILib:Colorpicker(tabName, sectionName, label, defaultValue, callback)
    local outline = Drawing.new('Square')
    outline.Color = self._color_crust
    outline.Thickness = 1
    outline.Filled = false

    local fill = Drawing.new('Square')
    fill.Color = Color3.fromRGB(unpack(defaultValue))
    fill.Filled = true

    local shadow = Drawing.new('Square')
    shadow.Color = BLACK
    shadow.Filled = true

    local text = Drawing.new('Text')
    text.Color = self._color_text
    text.Outline = true
    text.Text = label

    self:_AddToSection(tabName, sectionName, 'colorpicker', defaultValue, callback, {
        outline, fill, shadow, text
    }, {
        ['label'] = label
    })
end

function UILib:Button(tabName, sectionName, label, callback)
    local outline = Drawing.new('Square')
    outline.Color = self._color_crust
    outline.Thickness = 1
    outline.Filled = false

    local fill = Drawing.new('Square')
    fill.Color = self._color_crust
    fill.Filled = true

    local text = Drawing.new('Text')
    text.Color = self._color_text
    text.Outline = true
    text.Text = label

    self:_AddToSection(tabName, sectionName, 'button', nil, callback, {
        outline, fill, text
    }, {
        ['label'] = label
    })
end

function UILib:Keybind(tabName, sectionName, label, defaultValue, callback, mode)
    local text = Drawing.new('Text')
    text.Color = self._color_text
    text.Outline = true
    text.Text = label

    local outline = Drawing.new('Square')
    outline.Color = self._color_crust
    outline.Thickness = 1
    outline.Filled = false

    local fill = Drawing.new('Square')
    fill.Color = self._color_crust
    fill.Filled = true

    local key = Drawing.new('Text')
    key.Color = self._color_text
    key.Outline = true

    self:_AddToSection(tabName, sectionName, 'key', defaultValue, callback, {
        text, outline, fill, key
    }, {
        ['mode'] = mode or 'Hold',
        ['_listening'] = false,
        ['_state'] = nil
    })
end

function UILib:CreateSettingsTab(customName)
    local menuTab = self:Tab(customName or 'Menu')
    local menuSettings = self:Section(menuTab, 'Settings')
    self:Keybind(menuTab, menuSettings, 'Open key', 'f1', function(state)
        self:ToggleMenu(state)
    end, 'Toggle')
    self:Checkbox(menuTab, menuSettings, 'Watermark', true, function(state)
        self:ToggleWatermark(state)
    end)

    local menuTheme = self:Section(menuTab, 'Theming')
    local presetThemes = {'X11', 'Nord', 'Dracula', 'Catppuccin'}
    self:Choice(menuTab, menuTheme, 'Preset theme', {presetThemes[1]}, function(values)
        local theme = values[1]
        if theme == 'X11' then
            self._color_accent = Color3.fromRGB(255, 128, 0)
            self._color_surface = Color3.fromRGB(38, 38, 38)
            self._color_border = Color3.fromRGB(25, 25, 25)
            self._color_overlay = Color3.fromRGB(76, 76, 76)
            self._color_crust = Color3.fromRGB(0, 0, 0)
        elseif theme == 'Nord' then
            self._color_accent = Color3.fromRGB(135, 206, 235)
            self._color_surface = Color3.fromRGB(49, 54, 60)
            self._color_border = Color3.fromRGB(72, 80, 90)
            self._color_overlay = Color3.fromRGB(61, 66, 73)
            self._color_crust = Color3.fromRGB(88, 96, 106)
        elseif theme == 'Dracula' then
            self._color_accent = Color3.fromRGB(243, 67, 54)
            self._color_surface = Color3.fromRGB(40, 44, 59)
            self._color_border = Color3.fromRGB(64, 71, 89)
            self._color_overlay = Color3.fromRGB(29, 31, 45)
            self._color_crust = Color3.fromRGB(72, 73, 95)
        elseif theme == 'Catppuccin' then
            self._color_accent = Color3.fromRGB(240, 160, 200)
            self._color_surface = Color3.fromRGB(48, 47, 63)
            self._color_border = Color3.fromRGB(72, 71, 89)
            self._color_overlay = Color3.fromRGB(63, 62, 80)
            self._color_crust = Color3.fromRGB(33, 32, 44)
        end
    end, presetThemes, false)

    self:Colorpicker(menuTab, menuTheme, 'Accent', {255, 128, 0}, function(newColor)
        self._color_accent = newColor
    end)
    self:Colorpicker(menuTab, menuTheme, 'Base', {38, 38, 38}, function(newColor)
        self._color_surface = newColor
    end)
    self:Colorpicker(menuTab, menuTheme, 'Inner stroke', {25, 25, 25}, function(newColor)
        self._color_border = newColor
    end)
    self:Colorpicker(menuTab, menuTheme, 'Outer stroke', {76, 76, 76}, function(newColor)
        self._color_overlay = newColor
    end)
    self:Colorpicker(menuTab, menuTheme, 'Crust', {0, 0, 0}, function(newColor)
        self._color_crust = newColor
    end)

    return menuTab, menuSettings, menuTheme
end

function UILib:Step()
    local deltaTime = math.max(os.clock() - self._tick, 0.0035)
    local mousePos = getMousePos()

    for keycode, inputData in pairs(self._inputs) do
        local keycodeId = inputData['id']
        local interacted = iskeypressed and iskeypressed(keycodeId)
        if isrbxactive and isrbxactive() and interacted then
            if inputData['held'] == false and inputData['click'] == false then
                self._inputs[keycode]['click'] = true
            else
                self._inputs[keycode]['click'] = false
            end
            self._inputs[keycode]['held'] = true
        else
            self._inputs[keycode]['held'] = false
        end
    end

    local menuOpen = self._open
    local clickFrame = menuOpen and self._inputs['m1'].click
    local ctxFrame = menuOpen and self._inputs['m2'].click
    local m1Held = menuOpen and self._inputs['m1'].held

    local baseOpacity = self._base_opacity
    local childrenVisible = baseOpacity > 0.22
    self._base_opacity = clamp(lerp(baseOpacity, menuOpen and 1 or 0, deltaTime * 11), 0, 1)

    if setrobloxinput then
        setrobloxinput(not menuOpen)
    end

    -- Draw watermark
    local watermarkBase = self._tree['_drawings'][6]
    local watermarkCursor = self._tree['_drawings'][7]
    local watermarkCrust = self._tree['_drawings'][8]
    local watermarkBorder = self._tree['_drawings'][9]
    local watermarkTitle = self._tree['_drawings'][10]

    if self._watermark then
        local watermarkStates = {self.identity}
        for _, activity in ipairs(self._watermark_activity) do
            if type(activity) == 'string' then
                table.insert(watermarkStates, activity)
            end
        end

        local watermarkText = table.concat(watermarkStates, ' | ')
        local watermarkW, watermarkH = self._GetTextBounds(watermarkText)
        local watermarkPosition = Vector2.new(20, 20)
        local watermarkSize = Vector2.new(watermarkW + self._padding * 3, watermarkH + self._padding * 3)

        watermarkBase.Position = watermarkPosition
        watermarkBase.Size = watermarkSize
        watermarkBase.Visible = true
        watermarkBase.Color = self._color_surface

        watermarkCrust.Position = watermarkPosition
        watermarkCrust.Size = watermarkSize
        watermarkCrust.Visible = true
        watermarkCrust.Color = self._color_crust

        watermarkBorder.Position = watermarkPosition + Vector2.new(1, 1)
        watermarkBorder.Size = watermarkSize + Vector2.new(-2, -2)
        watermarkBorder.Visible = true
        watermarkBorder.Color = self._color_border

        watermarkCursor.Position = watermarkPosition + Vector2.new(2, 2)
        watermarkCursor.Size = Vector2.new(watermarkSize.x - 4, 1)
        watermarkCursor.Visible = true
        watermarkCursor.Color = self._color_accent

        watermarkTitle.Position = watermarkPosition + Vector2.new(2 + self._padding, 2 + self._padding)
        watermarkTitle.Text = watermarkText
        watermarkTitle.Visible = true
        watermarkTitle.Color = self._color_text
    else
        watermarkBase.Visible = false
        watermarkCrust.Visible = false
        watermarkBorder.Visible = false
        watermarkCursor.Visible = false
        watermarkTitle.Visible = false
    end

    -- Draw menu base
    local uiCrust = self._tree['_drawings'][1]
    local uiBorder = self._tree['_drawings'][2]
    local uiBase = self._tree['_drawings'][3]
    local uiNavbar = self._tree['_drawings'][4]
    local uiTitle = self._tree['_drawings'][5]

    uiBase.Position = Vector2.new(self.x, self.y)
    uiBase.Size = Vector2.new(self.w, self.h)
    uiBase.Transparency = baseOpacity
    uiBase.Visible = childrenVisible
    uiBase.Color = self._color_surface

    uiBorder.Position = Vector2.new(self.x + 1, self.y + 1)
    uiBorder.Size = Vector2.new(self.w - 2, self.h - 2)
    uiBorder.Transparency = baseOpacity
    uiBorder.Visible = childrenVisible
    uiBorder.Color = self._color_border

    uiCrust.Position = Vector2.new(self.x, self.y)
    uiCrust.Size = Vector2.new(self.w, self.h)
    uiCrust.Transparency = baseOpacity
    uiCrust.Visible = childrenVisible
    uiCrust.Color = self._color_crust

    uiNavbar.Position = Vector2.new(self.x + 2, self.y + 2)
    uiNavbar.Size = Vector2.new(self.w - 4, self._title_h - 4)
    uiNavbar.Transparency = baseOpacity
    uiNavbar.Visible = childrenVisible
    uiNavbar.Color = self._color_border

    local _titleW, titleH = self._GetTextBounds('')
    uiTitle.Position = Vector2.new(self.x + 7, self.y + self._title_h / 2 - titleH + 2)
    uiTitle.Transparency = baseOpacity
    uiTitle.Visible = childrenVisible
    uiTitle.Color = self._color_text

    -- Input handling for dragging
    local titleOrigin = Vector2.new(self.x, self.y)
    local titleSize = Vector2.new(self.w, self._title_h)

    if self._IsMouseWithinBounds(titleOrigin, titleSize) then
        if clickFrame then
            self._dragging = true
            self._drag_offset = mousePos - titleOrigin
        end
    end

    if self._dragging then
        if m1Held then
            self.x = mousePos.x - self._drag_offset.x
            self.y = mousePos.y - self._drag_offset.y
        else
            self._dragging = false
        end
        clickFrame = false
    end

    -- Draw tabs
    local numTabs = #self._tree['_tabs']
    for tabIndex, tab in ipairs(self._tree['_tabs']) do
        local tabName = tab['name']
        local tabDraws = tab['_drawings']
        local tabOpen = self._active_tab == tabName

        local tabBackdrop = tabDraws[1]
        local tabShadow = tabDraws[2]
        local tabCursor = tabDraws[3]
        local tabText = tabDraws[4]

        local tabW = (self.w - self._padding * 2 - (numTabs - 1) * 2) / numTabs
        local tabH = self._tab_h

        local tabPosition = Vector2.new(self.x + self._padding + (tabIndex - 1) * (tabW + 2), self.y + self._title_h + self._padding)
        local tabSize = Vector2.new(tabW, tabH)

        tabBackdrop.Position = tabPosition
        tabBackdrop.Size = tabSize
        tabBackdrop.Transparency = baseOpacity
        tabBackdrop.Visible = childrenVisible
        tabBackdrop.Color = self._color_border

        tabShadow.Position = tabPosition + Vector2.new(0, tabH - 8)
        tabShadow.Size = Vector2.new(tabW, 8)
        tabShadow.Transparency = 0.05 * baseOpacity
        tabShadow.Visible = childrenVisible

        tabCursor.Position = tabPosition
        tabCursor.Size = Vector2.new(tabW, 1)
        tabCursor.Transparency = baseOpacity
        tabCursor.Visible = tabOpen and childrenVisible
        tabCursor.Color = self._color_accent

        tabText.Position = tabPosition + Vector2.new(4, tabH / 2 - ESP_FONTSIZE / 2)
        tabText.Transparency = baseOpacity
        tabText.Visible = childrenVisible
        tabText.Color = self._color_text

        -- Input handling for tabs
        if clickFrame and self._IsMouseWithinBounds(tabPosition, tabSize) then
            self._active_tab = tabName
        end

        -- Draw sections and items (simplified for this example)
        if tabOpen then
            for sectionIndex, section in ipairs(tab['_sections']) do
                local sectionDraws = section['_drawings']
                local sectionItems = section['_items']

                -- Basic section drawing (you can expand this)
                local sectionBase = sectionDraws[1]
                local sectionCrust = sectionDraws[2]
                local sectionBorder = sectionDraws[3]
                local sectionTitle = sectionDraws[4]

                -- Simple section positioning
                local sectionY = self.y + self._title_h + self._tab_h + self._padding * 2 + (sectionIndex - 1) * 100
                local sectionPos = Vector2.new(self.x + self._padding, sectionY)
                local sectionSize = Vector2.new(self.w - self._padding * 2, 80)

                sectionBase.Position = sectionPos
                sectionBase.Size = sectionSize
                sectionBase.Transparency = baseOpacity
                sectionBase.Visible = childrenVisible

                sectionCrust.Position = sectionPos
                sectionCrust.Size = sectionSize
                sectionCrust.Transparency = baseOpacity
                sectionCrust.Visible = childrenVisible

                sectionBorder.Position = sectionPos + Vector2.new(1, 1)
                sectionBorder.Size = sectionSize - Vector2.new(2, 2)
                sectionBorder.Transparency = baseOpacity
                sectionBorder.Visible = childrenVisible

                sectionTitle.Position = sectionPos + Vector2.new(10, 5)
                sectionTitle.Transparency = baseOpacity
                sectionTitle.Visible = childrenVisible

                -- Draw items (basic implementation)
                for itemIndex, item in ipairs(sectionItems) do
                    local itemDraws = item['_drawings']
                    for _, drawing in ipairs(itemDraws) do
                        drawing.Transparency = baseOpacity
                        drawing.Visible = childrenVisible
                    end
                end
            end
        else
            -- Hide sections when tab is not active
            for _, section in ipairs(tab['_sections']) do
                undrawAll(section['_drawings'])
                for _, item in ipairs(section['_items']) do
                    undrawAll(item['_drawings'])
                end
            end
        end
    end

    -- Handle dropdown and colorpicker
    if self._active_dropdown and clickFrame then
        self:_RemoveDropdown()
    end

    if self._active_colorpicker and clickFrame then
        self:_RemoveColorpicker()
    end

    self._tick = os.clock()
end

function UILib:Destroy()
    for _, drawing in pairs(self._tree['_drawings']) do
        drawing:Remove()
    end

    self:_RemoveDropdown()
    self:_RemoveColorpicker()

    for _, tab in pairs(self._tree['_tabs']) do
        if tab['_drawings'] then
            for _, drawing in pairs(tab['_drawings']) do
                drawing:Remove()
            end
        end

        if tab._sections then
            for _, section in pairs(tab['_sections']) do
                for _, drawing in pairs(section['_drawings']) do
                    drawing:Remove()
                end
                
                if section._items then
                    for _, item in pairs(section._items) do
                        for _, drawing in pairs(item['_drawings']) do
                            drawing:Remove()
                        end
                    end
                end
            end
        end
    end

    self._tree = nil
    if setrobloxinput then
        setrobloxinput(true)
    end
end

return UILib
