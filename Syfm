-- UILib - Beautified and Cleaned Version
-- Extracted from Arcane Hub

local UILib = {}
UILib.__index = UILib

-- Services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- Utility Functions
local function clamp(value, min, max)
    if value < min then
        return min
    elseif value > max then
        return max
    else
        return value
    end
end

local function GetMousePosition()
    return Vector2.new(Mouse.X, Mouse.Y)
end

function UILib._IsMouseWithinBounds(position, size)
    local mousePos = GetMousePosition()
    return position and size and 
           mousePos.X >= position.X and mousePos.X <= position.X + size.X and
           mousePos.Y >= position.Y and mousePos.Y <= position.Y + size.Y
end

-- Constants
local UI_VISIBLE = true
local WINDOW_X, WINDOW_Y = 200, 200
local WINDOW_WIDTH, WINDOW_HEIGHT = 600, 350
local TAB_WIDTH, TAB_HEIGHT = 100, 30
local TAB_SPACING = 10
local CONTENT_WIDTH = 420
local CONTROL_HEIGHT = 35
local SLIDER_WIDTH = 120
local COLOR_PREVIEW_SIZE = 20
local CHECKBOX_SIZE = 25

-- Colors
local BACKGROUND_COLOR = Color3.fromRGB(20, 20, 20)
local ACCENT_COLOR = Color3.fromRGB(106, 0, 255)
local TAB_COLOR = Color3.fromRGB(30, 30, 30)
local TEXT_COLOR = Color3.fromRGB(255, 255, 255)
local CONTROL_BG_COLOR = Color3.fromRGB(40, 40, 40)
local HOVER_COLOR = Color3.fromRGB(50, 50, 50)

-- ZIndex Layers
local BASE_ZINDEX = 1
local WINDOW_ZINDEX = BASE_ZINDEX + 10
local TAB_ZINDEX = WINDOW_ZINDEX + 10
local TEXT_ZINDEX = TAB_ZINDEX + 10
local HIGHEST_ZINDEX = 9999

-- Keycodes
local KEYCODES = {
    A = 0x41, B = 0x42, C = 0x43, D = 0x44, E = 0x45, F = 0x46, G = 0x47,
    H = 0x48, I = 0x49, J = 0x4A, K = 0x4B, L = 0x4C, M = 0x4D, N = 0x4E,
    O = 0x4F, P = 0x50, Q = 0x51, R = 0x52, S = 0x53, T = 0x54, U = 0x55,
    V = 0x56, W = 0x57, X = 0x58, Y = 0x59, Z = 0x5A,
    M1 = 0x01, M2 = 0x02,
    ["1"] = 0x31, ["2"] = 0x32, ["3"] = 0x33, ["4"] = 0x34, ["5"] = 0x35,
    ["6"] = 0x36, ["7"] = 0x37, ["8"] = 0x38, ["9"] = 0x39, ["0"] = 0x30,
    SHIFT = 0x10, RSHIFT = 0xA1, CONTROL = 0x11, RCONTROL = 0xA3,
    BACKSPACE = 0x08, SPACE = 0x20, ENTER = 0x0D, TAB = 0x09, ESCAPE = 0x1B
}

-- Window Creation
function UILib:CreateWindow(config)
    local self = setmetatable({}, UILib)
    
    self.tabs = {}
    self.activeTab = nil
    self.name = config.Name or "Window"
    self.theme = config.Theme or "Default"
    self.toggleKey = config.ToggleUIKeybind or "K"
    self.minimized = false
    self.notifications = {}
    
    -- Create window background
    self.base = Drawing.new("Square")
    self.base.Size = Vector2.new(WINDOW_WIDTH, WINDOW_HEIGHT)
    self.base.Position = Vector2.new(WINDOW_X, WINDOW_Y)
    self.base.Filled = true
    self.base.Color = BACKGROUND_COLOR
    self.base.Visible = UI_VISIBLE
    self.base.Corner = 7
    self.base.ZIndex = WINDOW_ZINDEX
    
    -- Create title
    self.title = Drawing.new("Text")
    self.title.Text = self.name
    self.title.Position = Vector2.new(WINDOW_X + 10, WINDOW_Y + 10)
    self.title.Color = TEXT_COLOR
    self.title.Visible = UI_VISIBLE
    self.title.ZIndex = TEXT_ZINDEX
    
    return self
end

-- Tab Creation
function UILib:CreateTab(name)
    local tabIndex = #self.tabs + 1
    local tabY = WINDOW_Y + 50 + (tabIndex - 1) * (TAB_HEIGHT + TAB_SPACING)
    local tabId = "tab_" .. tabIndex
    
    -- Tab background
    local tabBg = Drawing.new("Square")
    tabBg.Size = Vector2.new(TAB_WIDTH, TAB_HEIGHT)
    tabBg.Position = Vector2.new(WINDOW_X + 10, tabY)
    tabBg.Filled = true
    tabBg.Color = TAB_COLOR
    tabBg.Visible = UI_VISIBLE
    tabBg.Corner = 5
    tabBg.ZIndex = TAB_ZINDEX
    
    -- Tab label
    local tabLabel = Drawing.new("Text")
    tabLabel.Text = name
    tabLabel.Position = Vector2.new(WINDOW_X + 20, tabY + 8)
    tabLabel.Color = TEXT_COLOR
    tabLabel.Visible = UI_VISIBLE
    tabLabel.ZIndex = TEXT_ZINDEX
    
    -- Active tab indicator
    local indicator = Drawing.new("Square")
    indicator.Size = Vector2.new(7, 20)
    indicator.Position = Vector2.new(WINDOW_X + 10, tabY + 5)
    indicator.Filled = true
    indicator.Color = ACCENT_COLOR
    indicator.Visible = false
    indicator.Corner = 5
    indicator.ZIndex = TEXT_ZINDEX
    
    local tab = {
        index = tabIndex,
        id = tabId,
        name = name,
        tab = tabBg,
        label = tabLabel,
        indicator = indicator,
        pos = Vector2.new(WINDOW_X + 10, tabY),
        size = Vector2.new(TAB_WIDTH, TAB_HEIGHT),
        items = {}
    }
    
    -- Tab methods
    function tab:CreateButton(config)
        return UILib:CreateButton(self, config.Name, config.Callback)
    end
    
    function tab:CreateToggle(config)
        return UILib:CreateToggle(self, config.Name, config.CurrentValue, config.Callback)
    end
    
    function tab:CreateSlider(config)
        return UILib:CreateSlider(self, config.Name, config.Range[1], config.Range[2], 
                                 config.CurrentValue, config.Increment, config.Callback)
    end
    
    function tab:CreateDropdown(config)
        return UILib:CreateDropdown(self, config.Name, config.Options, 
                                   config.CurrentOption[1], config.Callback, config.MultipleOptions)
    end
    
    function tab:CreateTextbox(config)
        return UILib:CreateTextbox(self, config.Name, config.Default, 
                                  config.PlaceholderText, config.ClearTextOnFocus, config.Callback)
    end
    
    function tab:CreateColorPicker(config)
        return UILib:CreateColorPicker(self, config.Name, config.Default, config.Callback)
    end
    
    table.insert(self.tabs, tab)
    
    if not self.activeTab then
        self.activeTab = tab
        indicator.Visible = true
    end
    
    return tab
end

-- Button Creation
function UILib:CreateButton(tab, text, callback)
    local buttonId = "button_" .. #tab.items + 1
    
    local container = Drawing.new("Square")
    container.Filled = true
    container.Corner = 5
    container.ZIndex = TEXT_ZINDEX
    
    local label = Drawing.new("Text")
    label.Color = TEXT_COLOR
    label.ZIndex = TEXT_ZINDEX + 1
    
    local button = {
        type = "button",
        id = buttonId,
        container = container,
        label = label,
        callback = callback,
        text = text,
        containerPos = Vector2.new(0, 0),
        containerSize = Vector2.new(CONTENT_WIDTH, CONTROL_HEIGHT),
        isHovered = false
    }
    
    table.insert(tab.items, button)
    return button
end

-- Toggle Creation
function UILib:CreateToggle(tab, text, initialState, callback)
    local container = Drawing.new("Square")
    container.Filled = true
    container.Corner = 5
    container.ZIndex = TEXT_ZINDEX
    
    local box = Drawing.new("Square")
    box.Filled = true
    box.Corner = 3
    box.ZIndex = TEXT_ZINDEX + 1
    
    local fill = Drawing.new("Square")
    fill.Filled = true
    fill.Corner = 2
    fill.ZIndex = TEXT_ZINDEX + 2
    
    local label = Drawing.new("Text")
    label.Color = TEXT_COLOR
    label.ZIndex = TEXT_ZINDEX + 1
    
    local toggle = {
        type = "toggle",
        container = container,
        box = box,
        fill = fill,
        label = label,
        state = initialState,
        callback = callback,
        text = text,
        containerPos = Vector2.new(0, 0),
        containerSize = Vector2.new(CONTENT_WIDTH, CONTROL_HEIGHT),
        checkboxPos = Vector2.new(0, 0),
        checkboxSize = Vector2.new(COLOR_PREVIEW_SIZE, COLOR_PREVIEW_SIZE)
    }
    
    table.insert(tab.items, toggle)
    return toggle
end

-- Slider Creation
function UILib:CreateSlider(tab, text, min, max, currentValue, increment, callback)
    local indicator = Drawing.new("Square")
    indicator.Size = Vector2.new(10, 16)
    indicator.Filled = true
    indicator.Color = ACCENT_COLOR
    indicator.Visible = false
    indicator.Corner = 3
    indicator.ZIndex = TEXT_ZINDEX + 3
    
    local container = Drawing.new("Square")
    container.Filled = true
    container.Corner = 5
    container.ZIndex = TEXT_ZINDEX
    
    local bar = Drawing.new("Square")
    bar.Filled = true
    bar.Corner = 3
    bar.ZIndex = TEXT_ZINDEX + 1
    
    local fill = Drawing.new("Square")
    fill.Filled = true
    fill.Corner = 3
    fill.ZIndex = TEXT_ZINDEX + 2
    
    local label = Drawing.new("Text")
    label.Color = TEXT_COLOR
    label.ZIndex = TEXT_ZINDEX + 1
    
    local valueLabel = Drawing.new("Text")
    valueLabel.Color = TEXT_COLOR
    valueLabel.ZIndex = TEXT_ZINDEX + 1
    
    local slider = {
        type = "slider",
        container = container,
        bar = bar,
        fill = fill,
        label = label,
        valueLabel = valueLabel,
        indicator = indicator,
        min = min,
        max = max,
        value = currentValue,
        step = increment,
        callback = callback,
        text = text,
        containerPos = Vector2.new(0, 0),
        containerSize = Vector2.new(CONTENT_WIDTH, CONTROL_HEIGHT),
        sliderPos = Vector2.new(0, 0),
        sliderSize = Vector2.new(SLIDER_WIDTH, 10)
    }
    
    table.insert(tab.items, slider)
    return slider
end

-- Main Update Loop
function UILib:Step()
    local mousePos = GetMousePosition()
    local mouseClicked = false
    
    if ismouse1pressed() then
        if not self.mouseDown then
            mouseClicked = true
        end
        self.mouseDown = true
    else
        self.mouseDown = false
    end
    
    -- Toggle UI with key
    if self.toggleKey then
        local keycode = KEYCODES[self.toggleKey:upper()]
        if keycode and iskeypressed(keycode) and isrbxactive() then
            UI_VISIBLE = not UI_VISIBLE
            self:CloseAllDropdownsAndColorPickers()
            self.base.Visible = UI_VISIBLE
            self.title.Visible = UI_VISIBLE
        end
    end
    
    if not UI_VISIBLE then return end
    
    -- Update UI elements here...
    -- (Implementation details for rendering buttons, toggles, sliders, etc.)
end

-- Cleanup
function UILib:Destroy()
    if self.base then self.base:Remove() end
    if self.title then self.title:Remove() end
    
    for _, tab in ipairs(self.tabs) do
        if tab.tab then tab.tab:Remove() end
        if tab.label then tab.label:Remove() end
        if tab.indicator then tab.indicator:Remove() end
        
        for _, item in ipairs(tab.items) do
            if item.container then item.container:Remove() end
            if item.label then item.label:Remove() end
            
            if item.type == "toggle" then
                if item.box then item.box:Remove() end
                if item.fill then item.fill:Remove() end
            elseif item.type == "slider" then
                if item.bar then item.bar:Remove() end
                if item.fill then item.fill:Remove() end
                if item.valueLabel then item.valueLabel:Remove() end
                if item.indicator then item.indicator:Remove() end
            end
        end
    end
    
    self.tabs = {}
    self.activeTab = nil
end

function UILib:CloseAllDropdownsAndColorPickers()
    for _, tab in ipairs(self.tabs) do
        for _, item in ipairs(tab.items) do
            if item.type == "dropdown" or item.type == "colorpicker" then
                item.isOpen = false
            end
        end
    end
end

return UILib
