--[[
    Drawing-Based UI Library
    A recreation of Pandora UI using the Drawing API
    
    HOW TO USE:
    
    1. Create a window:
       local Library = require("Library") -- or loadstring if loading remotely
       local Window = Library:Window({
           Name = "My Script"
       })
    
    2. Create a page:
       local Page = Window:Page({
           Name = "Main"
       })
    
    3. Create a section:
       local Section = Page:Section({
           Name = "Combat",
           LeftTitle = "Aimbot",
           RightTitle = "Visuals"
       })
    
    4. Add elements to sections:
       
       -- Toggle
       Section:Toggle({
           Name = "Enable Feature",
           Side = "Left", -- or "Right"
           Default = false,
           Callback = function(value)
               print("Toggle:", value)
           end
       })
       
       -- Slider
       Section:Slider({
           Name = "FOV",
           Side = "Left",
           Min = 0,
           Max = 360,
           Default = 90,
           Decimals = 0,
           Suffix = "Â°",
           Callback = function(value)
               print("Slider:", value)
           end
       })
       
       -- Dropdown
       local Dropdown = Section:List({
           Name = "Target Part",
           Side = "Left",
           Options = {"Head", "Torso", "HumanoidRootPart"},
           Default = "Head",
           Callback = function(value)
               print("Selected:", value)
           end
       })
       
       -- Button
       Section:Button({
           Name = "Execute",
           Side = "Right",
           Callback = function()
               print("Button clicked!")
           end
       })
       
       -- Colorpicker
       Section:Colorpicker({
           Name = "ESP Color",
           Side = "Right",
           Default = Color3.fromRGB(255, 0, 0),
           Callback = function(color)
               print("Color:", color)
           end
       })
    
    5. Toggle UI visibility:
       Press RIGHT SHIFT to toggle the UI
       
    6. Access flags:
       Library.Flags["FlagName"] -- Access saved values
    
    NOTES:
    - All drawing objects are automatically managed
    - UI can be dragged by clicking the title bar
    - Dropdowns close when clicking outside
    - Colors are in Color3 format (use Color3.fromRGB)
]]

local Library = {}
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- Library Properties
Library.Flags = {}
Library.Open = true
Library.Accent = Color3.fromRGB(76, 162, 252)
Library.Objects = {}
Library.Connections = {}
Library.Pages = {}
Library.ActivePage = nil
Library.ActiveSection = nil

-- UI Constants
local UI_SETTINGS = {
    WindowSize = Vector2.new(580, 442),
    HeaderHeight = 22,
    FooterHeight = 22,
    SectionListWidth = 110,
    PageButtonHeight = 22,
    ToggleSize = 6,
    SliderHeight = 6,
    DropdownItemHeight = 15,
    ColorPickerSize = Vector2.new(150, 133),
    FontSize = 12,
    Padding = 10
}

-- Colors
local COLORS = {
    Background = Color3.fromRGB(11, 11, 11),
    Border = Color3.fromRGB(28, 28, 28),
    Secondary = Color3.fromRGB(8, 8, 8),
    Text = Color3.fromRGB(78, 78, 78),
    TextActive = Color3.fromRGB(255, 255, 255),
    FrameBackground = Color3.fromRGB(20, 20, 20)
}

-- Utility Functions
local function CreateDrawing(type, properties)
    local drawing = Drawing.new(type)
    for prop, value in pairs(properties) do
        drawing[prop] = value
    end
    table.insert(Library.Objects, drawing)
    return drawing
end

local function IsMouseOver(pos, size)
    local mousePos = Vector2.new(Mouse.X, Mouse.Y)
    return mousePos.X >= pos.X and mousePos.X <= pos.X + size.X and
           mousePos.Y >= pos.Y and mousePos.Y <= pos.Y + size.Y
end

local function RemoveDrawing(drawing)
    for i, obj in ipairs(Library.Objects) do
        if obj == drawing then
            table.remove(Library.Objects, i)
            drawing:Remove()
            break
        end
    end
end

-- Window Class
function Library:Window(options)
    local Window = {
        Name = options.Name or "UI Library",
        Position = Vector2.new(
            (workspace.CurrentCamera.ViewportSize.X - UI_SETTINGS.WindowSize.X) / 2,
            (workspace.CurrentCamera.ViewportSize.Y - UI_SETTINGS.WindowSize.Y) / 2
        ),
        Size = UI_SETTINGS.WindowSize,
        Dragging = false,
        DragOffset = Vector2.new(0, 0),
        Pages = {},
        Drawings = {}
    }
    
    -- Main Background
    Window.Background = CreateDrawing("Square", {
        Position = Window.Position,
        Size = Window.Size,
        Color = COLORS.Border,
        Filled = true,
        Visible = Library.Open,
        ZIndex = 1
    })
    
    -- Inner Background
    Window.Inner = CreateDrawing("Square", {
        Position = Window.Position + Vector2.new(2, 2),
        Size = Window.Size - Vector2.new(4, 4),
        Color = COLORS.Secondary,
        Filled = true,
        Visible = Library.Open,
        ZIndex = 2
    })
    
    -- Header Background
    Window.Header = CreateDrawing("Square", {
        Position = Window.Position + Vector2.new(2, 2),
        Size = Vector2.new(Window.Size.X - 4, UI_SETTINGS.HeaderHeight),
        Color = COLORS.Secondary,
        Filled = true,
        Visible = Library.Open,
        ZIndex = 3
    })
    
    -- Title Text
    Window.Title = CreateDrawing("Text", {
        Position = Window.Position + Vector2.new(6, 6),
        Text = Window.Name,
        Size = UI_SETTINGS.FontSize,
        Color = Library.Accent,
        Visible = Library.Open,
        ZIndex = 4,
        Center = false,
        Outline = false
    })
    
    -- Middle Section Background
    Window.Middle = CreateDrawing("Square", {
        Position = Window.Position + Vector2.new(1, UI_SETTINGS.HeaderHeight + 2),
        Size = Vector2.new(Window.Size.X - 2, Window.Size.Y - UI_SETTINGS.HeaderHeight - UI_SETTINGS.FooterHeight - 4),
        Color = COLORS.FrameBackground,
        Filled = true,
        Visible = Library.Open,
        ZIndex = 2
    })
    
    -- Accent Line
    Window.AccentLine = CreateDrawing("Square", {
        Position = Window.Position + Vector2.new(Window.Size.X / 2, UI_SETTINGS.HeaderHeight + 3),
        Size = Vector2.new(Window.Size.X / 2, 1),
        Color = Library.Accent,
        Filled = true,
        Visible = Library.Open,
        ZIndex = 5
    })
    
    -- Footer
    Window.Footer = CreateDrawing("Text", {
        Position = Window.Position + Vector2.new(6, Window.Size.Y - 16),
        Text = "version: live",
        Size = UI_SETTINGS.FontSize,
        Color = COLORS.Text,
        Visible = Library.Open,
        ZIndex = 4,
        Center = false,
        Outline = false
    })
    
    -- Dragging
    local dragConnection
    dragConnection = UserInputService.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local mousePos = Vector2.new(Mouse.X, Mouse.Y)
            if IsMouseOver(Window.Position, Vector2.new(Window.Size.X, UI_SETTINGS.HeaderHeight)) then
                Window.Dragging = true
                Window.DragOffset = mousePos - Window.Position
            end
        end
    end)
    table.insert(Library.Connections, dragConnection)
    
    local dragEndConnection
    dragEndConnection = UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            Window.Dragging = false
        end
    end)
    table.insert(Library.Connections, dragEndConnection)
    
    -- Update positions while dragging
    local renderConnection
    renderConnection = RunService.RenderStepped:Connect(function()
        if Window.Dragging then
            local mousePos = Vector2.new(Mouse.X, Mouse.Y)
            Window.Position = mousePos - Window.DragOffset
            
            -- Update all window element positions
            Window.Background.Position = Window.Position
            Window.Inner.Position = Window.Position + Vector2.new(2, 2)
            Window.Header.Position = Window.Position + Vector2.new(2, 2)
            Window.Title.Position = Window.Position + Vector2.new(6, 6)
            Window.Middle.Position = Window.Position + Vector2.new(1, UI_SETTINGS.HeaderHeight + 2)
            Window.AccentLine.Position = Window.Position + Vector2.new(Window.Size.X / 2, UI_SETTINGS.HeaderHeight + 3)
            Window.Footer.Position = Window.Position + Vector2.new(6, Window.Size.Y - 16)
            
            -- Update pages and sections
            for _, page in ipairs(Window.Pages) do
                page:UpdatePositions()
            end
        end
    end)
    table.insert(Library.Connections, renderConnection)
    
    -- Add this code after "-- THIS IS WHERE IT CUT OFF"

function Window:Page(options)
    local Page = {
        Window = Window,
        Name = options.Name or "Page",
        Active = false,
        Sections = {},
        Button = {},
        SectionButtons = {},
        ButtonOffset = #Window.Pages * 56
    }
    
    -- Page button background
    Page.Button.Background = CreateDrawing("Square", {
        Position = Window.Position + Vector2.new(60 + Page.ButtonOffset, 5),
        Size = Vector2.new(50, 17),
        Color = COLORS.FrameBackground,
        Filled = true,
        Visible = false,
        ZIndex = 53
    })
    -- Page button border
    Page.Button.Border = CreateDrawing("Square", {
        Position = Window.Position + Vector2.new(60 + Page.ButtonOffset, 5),
        Size = Vector2.new(50, 17),
        Color = COLORS.Border,
        Filled = false,
        Visible = false,
        ZIndex = 53
    })
    
    -- Page button top accent
    Page.Button.TopAccent = CreateDrawing("Square", {
        Position = Window.Position + Vector2.new(63 + Page.ButtonOffset, 5),
        Size = Vector2.new(45, 1),
        Color = Library.Accent,
        Filled = true,
        Visible = false,
        ZIndex = 54
    })
    
    -- Page button text
    Page.Button.Text = CreateDrawing("Text", {
        Position = Window.Position + Vector2.new(85 + Page.ButtonOffset, 10),
        Text = Page.Name,
        Size = UI_SETTINGS.FontSize,
        Color = COLORS.Text,
        Visible = Library.Open,
        ZIndex = 54,
        Center = true,
        Outline = false
    })
    
    -- Section list container position
    Page.SectionListPos = Window.Position + Vector2.new(11, UI_SETTINGS.HeaderHeight + 15)
    
    function Page:Activate()
        Page.Active = true
        Page.Button.Background.Visible = true
        Page.Button.Border.Visible = true
        Page.Button.TopAccent.Visible = true
        Page.Button.Text.Color = Library.Accent
        
        -- Show sections
        for _, section in ipairs(Page.Sections) do
            section:UpdateVisibility()
        end
    end
    
    function Page:Deactivate()
        Page.Active = false
        Page.Button.Background.Visible = false
        Page.Button.Border.Visible = false
        Page.Button.TopAccent.Visible = false
        Page.Button.Text.Color = COLORS.Text
        
        -- Hide sections
        for _, section in ipairs(Page.Sections) do
            section:UpdateVisibility()
        end
    end
    
    function Page:UpdatePositions()
        Page.Button.Background.Position = Window.Position + Vector2.new(60 + Page.ButtonOffset, 5)
        Page.Button.Border.Position = Window.Position + Vector2.new(60 + Page.ButtonOffset, 5)
        Page.Button.TopAccent.Position = Window.Position + Vector2.new(63 + Page.ButtonOffset, 5)
        Page.Button.Text.Position = Window.Position + Vector2.new(85 + Page.ButtonOffset, 10)
        Page.SectionListPos = Window.Position + Vector2.new(11, UI_SETTINGS.HeaderHeight + 15)
        
        for _, section in ipairs(Page.Sections) do
            section:UpdatePositions()
        end
    end
    
    -- Click handler
    local clickConnection
    clickConnection = UserInputService.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 and Library.Open then
            if IsMouseOver(Page.Button.Background.Position, Page.Button.Background.Size) then
                if not Page.Active then
                    for _, otherPage in ipairs(Window.Pages) do
                        if otherPage.Active then
                            otherPage:Deactivate()
                        end
                    end
                    Page:Activate()
                    Library.ActivePage = Page
                end
            end
        end
    end)
    table.insert(Library.Connections, clickConnection)
    
    function Page:Section(options)
        local Section = {
            Page = Page,
            Name = options.Name or "Section",
            LeftTitle = options.LeftTitle or "General",
            RightTitle = options.RightTitle or "General",
            Active = false,
            LeftElements = {},
            RightElements = {},
            Button = {},
            ButtonIndex = #Page.Sections
        }
        
        -- Section button
        Section.Button.Background = CreateDrawing("Square", {
            Position = Page.SectionListPos + Vector2.new(1, Section.ButtonIndex * 25),
            Size = Vector2.new(UI_SETTINGS.SectionListWidth - 2, 22),
            Color = COLORS.FrameBackground,
            Filled = true,
            Visible = false,
            ZIndex = 54
        })
        
        Section.Button.Accent = CreateDrawing("Square", {
            Position = Page.SectionListPos + Vector2.new(1, Section.ButtonIndex * 25),
            Size = Vector2.new(1, 22),
            Color = Library.Accent,
            Filled = true,
            Visible = false,
            ZIndex = 55
        })
        
        Section.Button.Text = CreateDrawing("Text", {
            Position = Page.SectionListPos + Vector2.new(5, Section.ButtonIndex * 25 + 6),
            Text = Section.Name,
            Size = UI_SETTINGS.FontSize,
            Color = COLORS.Text,
            Visible = false,
            ZIndex = 55,
            Center = false,
            Outline = false
        })
        
        -- Left panel
        Section.LeftPanel = {
            Position = Window.Position + Vector2.new(133, UI_SETTINGS.HeaderHeight + 15),
            Size = Vector2.new((Window.Size.X - 144) / 2 - 10, Window.Size.Y - UI_SETTINGS.HeaderHeight - UI_SETTINGS.FooterHeight - 28)
        }
        
        Section.LeftBackground = CreateDrawing("Square", {
            Position = Section.LeftPanel.Position,
            Size = Section.LeftPanel.Size,
            Color = COLORS.Secondary,
            Filled = true,
            Visible = false,
            ZIndex = 10
        })
        
        Section.LeftBorder = CreateDrawing("Square", {
            Position = Section.LeftPanel.Position,
            Size = Section.LeftPanel.Size,
            Color = COLORS.Border,
            Filled = false,
            Visible = false,
            ZIndex = 10
        })
        
        Section.LeftHeader = CreateDrawing("Square", {
            Position = Section.LeftPanel.Position,
            Size = Vector2.new(Section.LeftPanel.Size.X, 20),
            Color = COLORS.FrameBackground,
            Filled = true,
            Visible = false,
            ZIndex = 11
        })
        
        Section.LeftHeaderBorder = CreateDrawing("Square", {
            Position = Section.LeftPanel.Position,
            Size = Vector2.new(Section.LeftPanel.Size.X, 20),
            Color = COLORS.Border,
            Filled = false,
            Visible = false,
            ZIndex = 11
        })
        
        Section.LeftTitle = CreateDrawing("Text", {
            Position = Section.LeftPanel.Position + Vector2.new(4, 5),
            Text = Section.LeftTitle,
            Size = UI_SETTINGS.FontSize,
            Color = COLORS.Text,
            Visible = false,
            ZIndex = 12,
            Center = false,
            Outline = false
        })
        
        -- Right panel
        Section.RightPanel = {
            Position = Window.Position + Vector2.new(133 + (Window.Size.X - 144) / 2 + 8, UI_SETTINGS.HeaderHeight + 15),
            Size = Vector2.new((Window.Size.X - 144) / 2 - 10, Window.Size.Y - UI_SETTINGS.HeaderHeight - UI_SETTINGS.FooterHeight - 28)
        }
        
        Section.RightBackground = CreateDrawing("Square", {
            Position = Section.RightPanel.Position,
            Size = Section.RightPanel.Size,
            Color = COLORS.Secondary,
            Filled = true,
            Visible = false,
            ZIndex = 10
        })
        
        Section.RightBorder = CreateDrawing("Square", {
            Position = Section.RightPanel.Position,
            Size = Section.RightPanel.Size,
            Color = COLORS.Border,
            Filled = false,
            Visible = false,
            ZIndex = 10
        })
        
        Section.RightHeader = CreateDrawing("Square", {
            Position = Section.RightPanel.Position,
            Size = Vector2.new(Section.RightPanel.Size.X, 20),
            Color = COLORS.FrameBackground,
            Filled = true,
            Visible = false,
            ZIndex = 11
        })
        
        Section.RightHeaderBorder = CreateDrawing("Square", {
            Position = Section.RightPanel.Position,
            Size = Vector2.new(Section.RightPanel.Size.X, 20),
            Color = COLORS.Border,
            Filled = false,
            Visible = false,
            ZIndex = 11
        })
        
        Section.RightTitle = CreateDrawing("Text", {
            Position = Section.RightPanel.Position + Vector2.new(4, 5),
            Text = Section.RightTitle,
            Size = UI_SETTINGS.FontSize,
            Color = COLORS.Text,
            Visible = false,
            ZIndex = 12,
            Center = false,
            Outline = false
        })
        function Section:Activate()
            Section.Active = true
            Section.Button.Text.Color = Library.Accent
            Section:UpdateVisibility()
        end
        
        function Section:Deactivate()
            Section.Active = false
            Section.Button.Text.Color = COLORS.Text
            Section:UpdateVisibility()
        end
        
        function Section:UpdateVisibility()
            local visible = Page.Active and Library.Open
            local activeVisible = visible and Section.Active
            
            Section.Button.Background.Visible = visible
            Section.Button.Accent.Visible = visible
            Section.Button.Text.Visible = visible
            
            Section.LeftBackground.Visible = activeVisible
            Section.LeftBorder.Visible = activeVisible
            Section.LeftHeader.Visible = activeVisible
            Section.LeftHeaderBorder.Visible = activeVisible
            Section.LeftTitle.Visible = activeVisible
            
            Section.RightBackground.Visible = activeVisible
            Section.RightBorder.Visible = activeVisible
            Section.RightHeader.Visible = activeVisible
            Section.RightHeaderBorder.Visible = activeVisible
            Section.RightTitle.Visible = activeVisible
            
            -- Update element visibility
            for _, element in ipairs(Section.LeftElements) do
                if element.UpdateVisibility then
                    element:UpdateVisibility(activeVisible)
                end
            end
            for _, element in ipairs(Section.RightElements) do
                if element.UpdateVisibility then
                    element:UpdateVisibility(activeVisible)
                end
            end
        end
        
        function Section:UpdatePositions()
            Section.Button.Background.Position = Page.SectionListPos + Vector2.new(1, Section.ButtonIndex * 25)
            Section.Button.Accent.Position = Page.SectionListPos + Vector2.new(1, Section.ButtonIndex * 25)
            Section.Button.Text.Position = Page.SectionListPos + Vector2.new(5, Section.ButtonIndex * 25 + 6)
            
            Section.LeftPanel.Position = Window.Position + Vector2.new(133, UI_SETTINGS.HeaderHeight + 15)
            Section.LeftBackground.Position = Section.LeftPanel.Position
            Section.LeftBorder.Position = Section.LeftPanel.Position
            Section.LeftHeader.Position = Section.LeftPanel.Position
            Section.LeftHeaderBorder.Position = Section.LeftPanel.Position
            Section.LeftTitle.Position = Section.LeftPanel.Position + Vector2.new(4, 5)
            
            Section.RightPanel.Position = Window.Position + Vector2.new(133 + (Window.Size.X - 144) / 2 + 8, UI_SETTINGS.HeaderHeight + 15)
            Section.RightBackground.Position = Section.RightPanel.Position
            Section.RightBorder.Position = Section.RightPanel.Position
            Section.RightHeader.Position = Section.RightPanel.Position
            Section.RightHeaderBorder.Position = Section.RightPanel.Position
            Section.RightTitle.Position = Section.RightPanel.Position + Vector2.new(4, 5)
            
            -- Update elements
            for _, element in ipairs(Section.LeftElements) do
                if element.UpdatePositions then
                    element:UpdatePositions()
                end
            end
            for _, element in ipairs(Section.RightElements) do
                if element.UpdatePositions then
                    element:UpdatePositions()
                end
            end
        end
        
        -- Click handler
        local clickConnection
        clickConnection = UserInputService.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 and Page.Active and Library.Open then
                if IsMouseOver(Section.Button.Background.Position, Section.Button.Background.Size) then
                    if not Section.Active then
                        for _, otherSection in ipairs(Page.Sections) do
                            if otherSection.Active then
                                otherSection:Deactivate()
                            end
                        end
                        Section:Activate()
                        Library.ActiveSection = Section
                    end
                end
            end
        end)
        table.insert(Library.Connections, clickConnection)
        
        -- TOGGLE ELEMENT
        function Section:Toggle(options)
            local Toggle = {
                Section = Section,
                Name = options.Name or "Toggle",
                State = options.Default or false,
                Callback = options.Callback or function() end,
                Flag = options.Flag or tostring(#Library.Flags + 1),
                Side = options.Side or "Left",
                Elements = {}
            }
            
            local elements = Toggle.Side == "Left" and Section.LeftElements or Section.RightElements
            local panel = Toggle.Side == "Left" and Section.LeftPanel or Section.RightPanel
            local yOffset = 30 + (#elements * 14)
            
            -- Toggle box
            Toggle.Box = CreateDrawing("Square", {
                Position = panel.Position + Vector2.new(10, yOffset + 3),
                Size = Vector2.new(UI_SETTINGS.ToggleSize, UI_SETTINGS.ToggleSize),
                Color = COLORS.FrameBackground,
                Filled = true,
                Visible = false,
                ZIndex = 15
            })
            
            Toggle.BoxBorder = CreateDrawing("Square", {
                Position = panel.Position + Vector2.new(10, yOffset + 3),
                Size = Vector2.new(UI_SETTINGS.ToggleSize, UI_SETTINGS.ToggleSize),
                Color = Color3.fromRGB(0, 0, 0),
                Filled = false,
                Visible = false,
                ZIndex = 15
            })
            
            Toggle.Check = CreateDrawing("Square", {
                Position = panel.Position + Vector2.new(10, yOffset + 3),
                Size = Vector2.new(UI_SETTINGS.ToggleSize, UI_SETTINGS.ToggleSize),
                Color = Library.Accent,
                Filled = true,
                Visible = false,
                ZIndex = 16
            })
            
            Toggle.Text = CreateDrawing("Text", {
                Position = panel.Position + Vector2.new(25, yOffset + 1),
                Text = Toggle.Name,
                Size = UI_SETTINGS.FontSize,
                Color = COLORS.Text,
                Visible = false,
                ZIndex = 15,
                Center = false,
                Outline = false
            })
            
            function Toggle:Set(value)
                Toggle.State = value
                Toggle.Check.Visible = value and Section.Active and Page.Active and Library.Open
                Toggle.Text.Color = value and COLORS.TextActive or COLORS.Text
                Library.Flags[Toggle.Flag] = value
                Toggle.Callback(value)
            end
            
            function Toggle:UpdateVisibility(visible)
                Toggle.Box.Visible = visible
                Toggle.BoxBorder.Visible = visible
                Toggle.Check.Visible = visible and Toggle.State
                Toggle.Text.Visible = visible
            end
            
            function Toggle:UpdatePositions()
                local panel = Toggle.Side == "Left" and Section.LeftPanel or Section.RightPanel
                local elements = Toggle.Side == "Left" and Section.LeftElements or Section.RightElements
                local index = 0
                for i, elem in ipairs(elements) do
                    if elem == Toggle then
                        index = i - 1
                        break
                    end
                end
                local yOffset = 30 + (index * 14)
                
                Toggle.Box.Position = panel.Position + Vector2.new(10, yOffset + 3)
                Toggle.BoxBorder.Position = panel.Position + Vector2.new(10, yOffset + 3)
                Toggle.Check.Position = panel.Position + Vector2.new(10, yOffset + 3)
                Toggle.Text.Position = panel.Position + Vector2.new(25, yOffset + 1)
            end
            
            -- Click handler
            local clickConnection
            clickConnection = UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and Section.Active and Page.Active and Library.Open then
                    if IsMouseOver(Toggle.Box.Position, Vector2.new(panel.Size.X - 20, 10)) then
                        Toggle:Set(not Toggle.State)
                    end
                end
            end)
            table.insert(Library.Connections, clickConnection)
            
            table.insert(elements, Toggle)
            Toggle:Set(Toggle.State)
            Library.Flags[Toggle.Flag] = Toggle.State
            
            return Toggle
        end
-- SLIDER ELEMENT
        function Section:Slider(options)
            local Slider = {
                Section = Section,
                Name = options.Name or "Slider",
                Min = options.Min or 0,
                Max = options.Max or 100,
                Default = options.Default or 50,
                Decimals = options.Decimals or 0,
                Suffix = options.Suffix or "",
                Callback = options.Callback or function() end,
                Flag = options.Flag or tostring(#Library.Flags + 1),
                Side = options.Side or "Left",
                Value = options.Default or 50,
                Dragging = false
            }
            
            local elements = Slider.Side == "Left" and Section.LeftElements or Section.RightElements
            local panel = Slider.Side == "Left" and Section.LeftPanel or Section.RightPanel
            local yOffset = 30 + (#elements * 14)
            
            if Slider.Name then
                yOffset = 30 + (#elements * 29)
                
                -- Title
                Slider.Title = CreateDrawing("Text", {
                    Position = panel.Position + Vector2.new(15, yOffset),
                    Text = Slider.Name,
                    Size = UI_SETTINGS.FontSize,
                    Color = COLORS.Text,
                    Visible = false,
                    ZIndex = 15,
                    Center = false,
                    Outline = false
                })
                
                yOffset = yOffset + 13
            end
            
            -- Slider background
            Slider.Background = CreateDrawing("Square", {
                Position = panel.Position + Vector2.new(15, yOffset + 3),
                Size = Vector2.new(panel.Size.X - 30, UI_SETTINGS.SliderHeight),
                Color = COLORS.FrameBackground,
                Filled = true,
                Visible = false,
                ZIndex = 15
            })
            
            Slider.BackgroundBorder = CreateDrawing("Square", {
                Position = panel.Position + Vector2.new(15, yOffset + 3),
                Size = Vector2.new(panel.Size.X - 30, UI_SETTINGS.SliderHeight),
                Color = Color3.fromRGB(0, 0, 0),
                Filled = false,
                Visible = false,
                ZIndex = 15
            })
            
            -- Slider fill
            Slider.Fill = CreateDrawing("Square", {
                Position = panel.Position + Vector2.new(15, yOffset + 3),
                Size = Vector2.new(0, UI_SETTINGS.SliderHeight),
                Color = Library.Accent,
                Filled = true,
                Visible = false,
                ZIndex = 16
            })
            
            -- Plus button
            Slider.Plus = CreateDrawing("Text", {
                Position = panel.Position + Vector2.new(panel.Size.X - 7, yOffset),
                Text = "+",
                Size = UI_SETTINGS.FontSize,
                Color = COLORS.Text,
                Visible = false,
                ZIndex = 15,
                Center = false,
                Outline = false
            })
            
            -- Minus button
            Slider.Minus = CreateDrawing("Text", {
                Position = panel.Position + Vector2.new(-1, yOffset),
                Text = "-",
                Size = UI_SETTINGS.FontSize,
                Color = COLORS.Text,
                Visible = false,
                ZIndex = 15,
                Center = false,
                Outline = false
            })
            
            -- Value text
            Slider.ValueText = CreateDrawing("Text", {
                Position = panel.Position + Vector2.new(15, Slider.Name and yOffset - 13 or yOffset - 1),
                Text = "50" .. Slider.Suffix,
                Size = UI_SETTINGS.FontSize,
                Color = COLORS.Text,
                Visible = false,
                ZIndex = 15,
                Center = Slider.Name and false or true,
                Outline = false
            })
            
            if not Slider.Name then
                Slider.ValueText.Position = panel.Position + Vector2.new(panel.Size.X / 2, yOffset - 1)
            else
                Slider.ValueText.Position = panel.Position + Vector2.new(panel.Size.X - 15, yOffset - 13)
            end
            
            local function Set(value)
                value = math.clamp(math.floor(value / (10 ^ -Slider.Decimals)) * (10 ^ -Slider.Decimals), Slider.Min, Slider.Max)
                
                if value == Slider.Min then
                    Slider.ValueText.Color = COLORS.Text
                    if Slider.Name and Slider.Title then
                        Slider.Title.Color = COLORS.Text
                    end
                else
                    Slider.ValueText.Color = COLORS.TextActive
                    if Slider.Name and Slider.Title then
                        Slider.Title.Color = COLORS.TextActive
                    end
                end
                
                Slider.ValueText.Text = tostring(value) .. Slider.Suffix
                Slider.Value = value
                
                local sizeX = ((value - Slider.Min) / (Slider.Max - Slider.Min))
                Slider.Fill.Size = Vector2.new((panel.Size.X - 30) * sizeX, UI_SETTINGS.SliderHeight)
                
                Library.Flags[Slider.Flag] = value
                Slider.Callback(value)
            end
            
            Set(Slider.Default)
            
            local function Slide(input)
                local sizeX = (input.Position.X - Slider.Background.Position.X) / Slider.Background.Size.X
                local value = ((Slider.Max - Slider.Min) * sizeX) + Slider.Min
                Set(value)
            end
            
            function Slider:Set(value)
                Set(value)
            end
            
            function Slider:UpdateVisibility(visible)
                if Slider.Name and Slider.Title then
                    Slider.Title.Visible = visible
                end
                Slider.Background.Visible = visible
                Slider.BackgroundBorder.Visible = visible
                Slider.Fill.Visible = visible
                Slider.Plus.Visible = visible
                Slider.Minus.Visible = visible
                Slider.ValueText.Visible = visible
            end
            
            function Slider:UpdatePositions()
                local panel = Slider.Side == "Left" and Section.LeftPanel or Section.RightPanel
                local elements = Slider.Side == "Left" and Section.LeftElements or Section.RightElements
                local index = 0
                for i, elem in ipairs(elements) do
                    if elem == Slider then
                        index = i - 1
                        break
                    end
                end
                local yOffset = 30 + (Slider.Name and index * 29 or index * 14)
                
                if Slider.Name and Slider.Title then
                    Slider.Title.Position = panel.Position + Vector2.new(15, yOffset)
                    yOffset = yOffset + 13
                end
                
                Slider.Background.Position = panel.Position + Vector2.new(15, yOffset + 3)
                Slider.BackgroundBorder.Position = panel.Position + Vector2.new(15, yOffset + 3)
                Slider.Fill.Position = panel.Position + Vector2.new(15, yOffset + 3)
                Slider.Plus.Position = panel.Position + Vector2.new(panel.Size.X - 7, yOffset)
                Slider.Minus.Position = panel.Position + Vector2.new(-1, yOffset)
                
                if not Slider.Name then
                    Slider.ValueText.Position = panel.Position + Vector2.new(panel.Size.X / 2, yOffset - 1)
                else
                    Slider.ValueText.Position = panel.Position + Vector2.new(panel.Size.X - 15, yOffset - 13)
                end
            end
            
            -- Input handlers
            local bgConnection = UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    if IsMouseOver(Slider.Background.Position, Slider.Background.Size) and Section.Active and Page.Active and Library.Open then
                        Slider.Dragging = true
                        Slide(input)
                    end
                end
            end)
            table.insert(Library.Connections, bgConnection)
            
            local fillConnection = UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    if IsMouseOver(Slider.Fill.Position, Slider.Fill.Size) and Section.Active and Page.Active and Library.Open then
                        Slider.Dragging = true
                        Slide(input)
                    end
                end
            end)
            table.insert(Library.Connections, fillConnection)
            
            local endConnection = UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    Slider.Dragging = false
                end
            end)
            table.insert(Library.Connections, endConnection)
            
            local moveConnection = UserInputService.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    if Slider.Dragging then
                        Slide(input)
                    end
                end
            end)
            table.insert(Library.Connections, moveConnection)
            
            local plusConnection = UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    if IsMouseOver(Slider.Plus.Position, Vector2.new(10, 10)) and Section.Active and Page.Active and Library.Open then
                        Set(Slider.Value + 1)
                    end
                end
            end)
            table.insert(Library.Connections, plusConnection)
            
            local minusConnection = UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    if IsMouseOver(Slider.Minus.Position, Vector2.new(10, 10)) and Section.Active and Page.Active and Library.Open then
                        Set(Slider.Value - 1)
                    end
                end
            end)
            table.insert(Library.Connections, minusConnection)
            
            table.insert(elements, Slider)
            Library.Flags[Slider.Flag] = Slider.Value
            
            return Slider
        end
-- BUTTON ELEMENT
        function Section:Button(options)
            local Button = {
                Section = Section,
                Name = options.Name or "Button",
                Callback = options.Callback or function() end,
                Side = options.Side or "Left"
            }
            
            local elements = Button.Side == "Left" and Section.LeftElements or Section.RightElements
            local panel = Button.Side == "Left" and Section.LeftPanel or Section.RightPanel
            local yOffset = 30 + (#elements * 14)
            
            -- Button background
            Button.Background = CreateDrawing("Square", {
                Position = panel.Position + Vector2.new(15, yOffset),
                Size = Vector2.new(panel.Size.X - 30, 15),
                Color = COLORS.FrameBackground,
                Filled = true,
                Visible = false,
                ZIndex = 15
            })
            
            Button.Border = CreateDrawing("Square", {
                Position = panel.Position + Vector2.new(15, yOffset),
                Size = Vector2.new(panel.Size.X - 30, 15),
                Color = Color3.fromRGB(0, 0, 0),
                Filled = false,
                Visible = false,
                ZIndex = 15
            })
            
            -- Button text
            Button.Text = CreateDrawing("Text", {
                Position = panel.Position + Vector2.new(panel.Size.X / 2, yOffset + 1),
                Text = Button.Name,
                Size = UI_SETTINGS.FontSize,
                Color = COLORS.Text,
                Visible = false,
                ZIndex = 16,
                Center = true,
                Outline = false
            })
            
            function Button:UpdateVisibility(visible)
                Button.Background.Visible = visible
                Button.Border.Visible = visible
                Button.Text.Visible = visible
            end
            
            function Button:UpdatePositions()
                local panel = Button.Side == "Left" and Section.LeftPanel or Section.RightPanel
                local elements = Button.Side == "Left" and Section.LeftElements or Section.RightElements
                local index = 0
                for i, elem in ipairs(elements) do
                    if elem == Button then
                        index = i - 1
                        break
                    end
                end
                local yOffset = 30 + (index * 14)
                
                Button.Background.Position = panel.Position + Vector2.new(15, yOffset)
                Button.Border.Position = panel.Position + Vector2.new(15, yOffset)
                Button.Text.Position = panel.Position + Vector2.new(panel.Size.X / 2, yOffset + 1)
            end
            
            -- Click handler
            local clickConnection
            clickConnection = UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and Section.Active and Page.Active and Library.Open then
                    if IsMouseOver(Button.Background.Position, Button.Background.Size) then
                        Button.Text.Color = COLORS.TextActive
                        Button.Callback()
                        wait(0.1)
                        Button.Text.Color = COLORS.Text
                    end
                end
            end)
            table.insert(Library.Connections, clickConnection)
            
            table.insert(elements, Button)
            return Button
        end
        
        -- LIST/DROPDOWN ELEMENT
        function Section:List(options)
            local List = {
                Section = Section,
                Name = options.Name or "List",
                Options = options.Options or {"Option 1", "Option 2", "Option 3"},
                State = options.Default or nil,
                Callback = options.Callback or function() end,
                Flag = options.Flag or tostring(#Library.Flags + 1),
                Side = options.Side or "Left",
                Open = false,
                OptionInstances = {}
            }
            
            local elements = List.Side == "Left" and Section.LeftElements or Section.RightElements
            local panel = List.Side == "Left" and Section.LeftPanel or Section.RightPanel
            local yOffset = 30 + (#elements * 34)
            
            -- Title
            List.Title = CreateDrawing("Text", {
                Position = panel.Position + Vector2.new(15, yOffset),
                Text = List.Name,
                Size = UI_SETTINGS.FontSize,
                Color = COLORS.Text,
                Visible = false,
                ZIndex = 15,
                Center = false,
                Outline = false
            })
            
            -- Dropdown box
            List.Background = CreateDrawing("Square", {
                Position = panel.Position + Vector2.new(15, yOffset + 16),
                Size = Vector2.new(panel.Size.X - 30, 15),
                Color = COLORS.FrameBackground,
                Filled = true,
                Visible = false,
                ZIndex = 15
            })
            
            List.Border = CreateDrawing("Square", {
                Position = panel.Position + Vector2.new(15, yOffset + 16),
                Size = Vector2.new(panel.Size.X - 30, 15),
                Color = Color3.fromRGB(0, 0, 0),
                Filled = false,
                Visible = false,
                ZIndex = 15
            })
            
            -- Value text
            List.ValueText = CreateDrawing("Text", {
                Position = panel.Position + Vector2.new(17, yOffset + 17),
                Text = List.State or "",
                Size = UI_SETTINGS.FontSize,
                Color = COLORS.Text,
                Visible = false,
                ZIndex = 16,
                Center = false,
                Outline = false
            })
            
            -- Icon
            List.Icon = CreateDrawing("Text", {
                Position = panel.Position + Vector2.new(panel.Size.X - 20, yOffset + 17),
                Text = "-",
                Size = UI_SETTINGS.FontSize,
                Color = COLORS.Text,
                Visible = false,
                ZIndex = 16,
                Center = false,
                Outline = false
            })
            
            -- Content holder
            List.Content = {
                Position = panel.Position + Vector2.new(15, yOffset + 33),
                Size = Vector2.new(panel.Size.X - 30, #List.Options * UI_SETTINGS.DropdownItemHeight)
            }
            
            List.ContentBackground = CreateDrawing("Square", {
                Position = List.Content.Position,
                Size = List.Content.Size,
                Color = COLORS.FrameBackground,
                Filled = true,
                Visible = false,
                ZIndex = 110
            })
            
            List.ContentBorder = CreateDrawing("Square", {
                Position = List.Content.Position,
                Size = List.Content.Size,
                Color = Color3.fromRGB(0, 0, 0),
                Filled = false,
                Visible = false,
                ZIndex = 110
            })
            
            -- Create option buttons
            for i, option in ipairs(List.Options) do
                local optionData = {}
                
                optionData.Background = CreateDrawing("Square", {
                    Position = List.Content.Position + Vector2.new(0, (i - 1) * UI_SETTINGS.DropdownItemHeight),
                    Size = Vector2.new(List.Content.Size.X, UI_SETTINGS.DropdownItemHeight),
                    Color = COLORS.FrameBackground,
                    Filled = true,
                    Visible = false,
                    ZIndex = 111
                })
                
                optionData.Text = CreateDrawing("Text", {
                    Position = List.Content.Position + Vector2.new(2, (i - 1) * UI_SETTINGS.DropdownItemHeight + 1),
                    Text = option,
                    Size = UI_SETTINGS.FontSize,
                    Color = COLORS.Text,
                    Visible = false,
                    ZIndex = 111,
                    Center = false,
                    Outline = false
                })
                
                List.OptionInstances[option] = optionData
            end
            
            function List:Set(value)
                for opt, data in pairs(List.OptionInstances) do
                    if opt ~= value then
                        data.Text.Color = COLORS.Text
                    end
                end
                
                if value and List.OptionInstances[value] then
                    List.State = value
                    List.ValueText.Text = value
                    List.OptionInstances[value].Text.Color = COLORS.TextActive
                    Library.Flags[List.Flag] = value
                    List.Callback(value)
                else
                    List.State = nil
                    List.ValueText.Text = ""
                    Library.Flags[List.Flag] = nil
                    List.Callback(nil)
                end
            end
            
            function List:UpdateVisibility(visible)
                List.Title.Visible = visible
                List.Background.Visible = visible
                List.Border.Visible = visible
                List.ValueText.Visible = visible
                List.Icon.Visible = visible
                
                local contentVisible = visible and List.Open
                List.ContentBackground.Visible = contentVisible
                List.ContentBorder.Visible = contentVisible
                
                for _, data in pairs(List.OptionInstances) do
                    data.Background.Visible = contentVisible
                    data.Text.Visible = contentVisible
                end
            end
            
            function List:UpdatePositions()
                local panel = List.Side == "Left" and Section.LeftPanel or Section.RightPanel
                local elements = List.Side == "Left" and Section.LeftElements or Section.RightElements
                local index = 0
                for i, elem in ipairs(elements) do
                    if elem == List then
                        index = i - 1
                        break
                    end
                end
                local yOffset = 30 + (index * 34)
                
                List.Title.Position = panel.Position + Vector2.new(15, yOffset)
                List.Background.Position = panel.Position + Vector2.new(15, yOffset + 16)
                List.Border.Position = panel.Position + Vector2.new(15, yOffset + 16)
                List.ValueText.Position = panel.Position + Vector2.new(17, yOffset + 17)
                List.Icon.Position = panel.Position + Vector2.new(panel.Size.X - 20, yOffset + 17)
                
                List.Content.Position = panel.Position + Vector2.new(15, yOffset + 33)
                List.ContentBackground.Position = List.Content.Position
                List.ContentBorder.Position = List.Content.Position
                
                for i, option in ipairs(List.Options) do
                    local data = List.OptionInstances[option]
                    data.Background.Position = List.Content.Position + Vector2.new(0, (i - 1) * UI_SETTINGS.DropdownItemHeight)
                    data.Text.Position = List.Content.Position + Vector2.new(2, (i - 1) * UI_SETTINGS.DropdownItemHeight + 1)
                end
            end
            
            -- Main dropdown click handler
            local dropdownConnection = UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and Section.Active and Page.Active and Library.Open then
                    if IsMouseOver(List.Background.Position, List.Background.Size) then
                        List.Open = not List.Open
                        List:UpdateVisibility(true)
                    end
                end
            end)
            table.insert(Library.Connections, dropdownConnection)
            
            -- Option click handlers
            for option, data in pairs(List.OptionInstances) do
                local optionConnection = UserInputService.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 and Section.Active and Page.Active and Library.Open and List.Open then
                        if IsMouseOver(data.Background.Position, data.Background.Size) then
                            List:Set(option)
                            List.Open = false
                            List:UpdateVisibility(true)
                        end
                    end
                end)
                table.insert(Library.Connections, optionConnection)
            end
            
            -- Close dropdown when clicking outside
            local closeConnection = UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and List.Open and Library.Open then
                    if not IsMouseOver(List.Background.Position, List.Background.Size) and 
                       not IsMouseOver(List.Content.Position, List.Content.Size) then
                        List.Open = false
                        List:UpdateVisibility(Section.Active and Page.Active)
                    end
                end
            end)
            table.insert(Library.Connections, closeConnection)
            
            table.insert(elements, List)
            if List.State then
                List:Set(List.State)
            end
            Library.Flags[List.Flag] = List.State
            
            return List
        end
-- COLORPICKER ELEMENT
        function Section:Colorpicker(options)
            local Colorpicker = {
                Section = Section,
                Name = options.Name or "Colorpicker",
                State = options.Default or Color3.fromRGB(255, 0, 0),
                Alpha = options.Alpha or 1,
                Callback = options.Callback or function() end,
                Flag = options.Flag or tostring(#Library.Flags + 1),
                Side = options.Side or "Left",
                Open = false
            }
            
            local elements = Colorpicker.Side == "Left" and Section.LeftElements or Section.RightElements
            local panel = Colorpicker.Side == "Left" and Section.LeftPanel or Section.RightPanel
            local yOffset = 30 + (#elements * 14)
            
            -- Text label
            Colorpicker.Text = CreateDrawing("Text", {
                Position = panel.Position + Vector2.new(15, yOffset),
                Text = Colorpicker.Name,
                Size = UI_SETTINGS.FontSize,
                Color = COLORS.Text,
                Visible = false,
                ZIndex = 15,
                Center = false,
                Outline = false
            })
            
            -- Color icon
            Colorpicker.Icon = CreateDrawing("Square", {
                Position = panel.Position + Vector2.new(panel.Size.X - 30, yOffset + 4),
                Size = Vector2.new(15, 6),
                Color = Colorpicker.State,
                Filled = true,
                Visible = false,
                ZIndex = 15
            })
            
            Colorpicker.IconBorder = CreateDrawing("Square", {
                Position = panel.Position + Vector2.new(panel.Size.X - 30, yOffset + 4),
                Size = Vector2.new(15, 6),
                Color = Color3.fromRGB(0, 0, 0),
                Filled = false,
                Visible = false,
                ZIndex = 15
            })
            
            -- Picker window
            local pickerPos = panel.Position + Vector2.new(panel.Size.X - 180, yOffset + 10)
            
            Colorpicker.Window = CreateDrawing("Square", {
                Position = pickerPos,
                Size = UI_SETTINGS.ColorPickerSize,
                Color = COLORS.FrameBackground,
                Filled = true,
                Visible = false,
                ZIndex = 120
            })
            
            Colorpicker.WindowBorder = CreateDrawing("Square", {
                Position = pickerPos,
                Size = UI_SETTINGS.ColorPickerSize,
                Color = COLORS.Border,
                Filled = false,
                Visible = false,
                ZIndex = 120
            })
            
            -- Rounded corners for picker window using circles
            Colorpicker.CornerTL = CreateDrawing("Circle", {
                Position = pickerPos + Vector2.new(2, 2),
                Radius = 2,
                Color = COLORS.FrameBackground,
                Filled = true,
                Visible = false,
                ZIndex = 121,
                NumSides = 16
            })
            
            Colorpicker.CornerTR = CreateDrawing("Circle", {
                Position = pickerPos + Vector2.new(UI_SETTINGS.ColorPickerSize.X - 2, 2),
                Radius = 2,
                Color = COLORS.FrameBackground,
                Filled = true,
                Visible = false,
                ZIndex = 121,
                NumSides = 16
            })
            
            Colorpicker.CornerBL = CreateDrawing("Circle", {
                Position = pickerPos + Vector2.new(2, UI_SETTINGS.ColorPickerSize.Y - 2),
                Radius = 2,
                Color = COLORS.FrameBackground,
                Filled = true,
                Visible = false,
                ZIndex = 121,
                NumSides = 16
            })
            
            Colorpicker.CornerBR = CreateDrawing("Circle", {
                Position = pickerPos + Vector2.new(UI_SETTINGS.ColorPickerSize.X - 2, UI_SETTINGS.ColorPickerSize.Y - 2),
                Radius = 2,
                Color = COLORS.FrameBackground,
                Filled = true,
                Visible = false,
                ZIndex = 121,
                NumSides = 16
            })
            
            -- Saturation/Value picker
            Colorpicker.Saturation = CreateDrawing("Square", {
                Position = pickerPos + Vector2.new(5, 5),
                Size = Vector2.new(123, 123),
                Color = Colorpicker.State,
                Filled = true,
                Visible = false,
                ZIndex = 120
            })
            
            Colorpicker.SaturationBorder = CreateDrawing("Square", {
                Position = pickerPos + Vector2.new(5, 5),
                Size = Vector2.new(123, 123),
                Color = COLORS.Border,
                Filled = false,
                Visible = false,
                ZIndex = 120
            })
            
            -- Hue bar
            Colorpicker.Hue = CreateDrawing("Square", {
                Position = pickerPos + Vector2.new(135, 5),
                Size = Vector2.new(10, 123),
                Color = Color3.fromRGB(255, 255, 255),
                Filled = true,
                Visible = false,
                ZIndex = 120
            })
            
            Colorpicker.HueBorder = CreateDrawing("Square", {
                Position = pickerPos + Vector2.new(135, 5),
                Size = Vector2.new(10, 123),
                Color = COLORS.Border,
                Filled = false,
                Visible = false,
                ZIndex = 120
            })
            
            local hue, sat, val = Colorpicker.State:ToHSV()
            local draggingSat = false
            local draggingHue = false
            
            local function Set(color, alpha, updatePos)
                if typeof(color) == "table" then
                    alpha = color[4]
                    color = Color3.fromHSV(color[1], color[2], color[3])
                end
                if typeof(color) == "string" then
                    color = Color3.fromHex(color)
                end
                
                hue, sat, val = color:ToHSV()
                Colorpicker.State = Color3.fromHSV(hue, sat, val)
                Colorpicker.Alpha = alpha or 1
                
                Colorpicker.Icon.Color = Colorpicker.State
                Colorpicker.Saturation.Color = Color3.fromHSV(hue, 1, 1)
                
                Library.Flags[Colorpicker.Flag] = Colorpicker.State
                Colorpicker.Callback(Colorpicker.State)
            end
            
            Set(Colorpicker.State, Colorpicker.Alpha)
            
            local function UpdateSatVal(input)
                local sizeX = math.clamp((input.Position.X - Colorpicker.Saturation.Position.X) / Colorpicker.Saturation.Size.X, 0, 1)
                local sizeY = 1 - math.clamp((input.Position.Y - Colorpicker.Saturation.Position.Y) / Colorpicker.Saturation.Size.Y, 0, 1)
                Set(Color3.fromHSV(hue, sizeX, sizeY), Colorpicker.Alpha, true)
            end
            
            local function UpdateHue(input)
                local sizeY = 1 - math.clamp((input.Position.Y - Colorpicker.Hue.Position.Y) / Colorpicker.Hue.Size.Y, 0, 1)
                hue = sizeY
                Colorpicker.Saturation.Color = Color3.fromHSV(sizeY, 1, 1)
                Set(Color3.fromHSV(sizeY, sat, val), Colorpicker.Alpha, true)
            end
            
            function Colorpicker:Set(color, alpha)
                Set(color, alpha)
            end
            
            function Colorpicker:UpdateVisibility(visible)
                Colorpicker.Text.Visible = visible
                Colorpicker.Icon.Visible = visible
                Colorpicker.IconBorder.Visible = visible
                
                local pickerVisible = visible and Colorpicker.Open
                Colorpicker.Window.Visible = pickerVisible
                Colorpicker.WindowBorder.Visible = pickerVisible
                Colorpicker.CornerTL.Visible = pickerVisible
                Colorpicker.CornerTR.Visible = pickerVisible
                Colorpicker.CornerBL.Visible = pickerVisible
                Colorpicker.CornerBR.Visible = pickerVisible
                Colorpicker.Saturation.Visible = pickerVisible
                Colorpicker.SaturationBorder.Visible = pickerVisible
                Colorpicker.Hue.Visible = pickerVisible
                Colorpicker.HueBorder.Visible = pickerVisible
            end
            
            function Colorpicker:UpdatePositions()
                local panel = Colorpicker.Side == "Left" and Section.LeftPanel or Section.RightPanel
                local elements = Colorpicker.Side == "Left" and Section.LeftElements or Section.RightElements
                local index = 0
                for i, elem in ipairs(elements) do
                    if elem == Colorpicker then
                        index = i - 1
                        break
                    end
                end
                local yOffset = 30 + (index * 14)
                
                Colorpicker.Text.Position = panel.Position + Vector2.new(15, yOffset)
                Colorpicker.Icon.Position = panel.Position + Vector2.new(panel.Size.X - 30, yOffset + 4)
                Colorpicker.IconBorder.Position = panel.Position + Vector2.new(panel.Size.X - 30, yOffset + 4)
                
                local pickerPos = panel.Position + Vector2.new(panel.Size.X - 180, yOffset + 10)
                Colorpicker.Window.Position = pickerPos
                Colorpicker.WindowBorder.Position = pickerPos
                Colorpicker.CornerTL.Position = pickerPos + Vector2.new(2, 2)
                Colorpicker.CornerTR.Position = pickerPos + Vector2.new(UI_SETTINGS.ColorPickerSize.X - 2, 2)
                Colorpicker.CornerBL.Position = pickerPos + Vector2.new(2, UI_SETTINGS.ColorPickerSize.Y - 2)
                Colorpicker.CornerBR.Position = pickerPos + Vector2.new(UI_SETTINGS.ColorPickerSize.X - 2, UI_SETTINGS.ColorPickerSize.Y - 2)
                Colorpicker.Saturation.Position = pickerPos + Vector2.new(5, 5)
                Colorpicker.SaturationBorder.Position = pickerPos + Vector2.new(5, 5)
                Colorpicker.Hue.Position = pickerPos + Vector2.new(135, 5)
                Colorpicker.HueBorder.Position = pickerPos + Vector2.new(135, 5)
            end
            
            -- Icon click handler
            local iconConnection = UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and Section.Active and Page.Active and Library.Open then
                    if IsMouseOver(Colorpicker.Icon.Position, Colorpicker.Icon.Size) then
                        Colorpicker.Open = not Colorpicker.Open
                        Colorpicker:UpdateVisibility(true)
                    end
                end
            end)
            table.insert(Library.Connections, iconConnection)
            
            -- Saturation picker handlers
            local satBeginConnection = UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and Colorpicker.Open and Library.Open then
                    if IsMouseOver(Colorpicker.Saturation.Position, Colorpicker.Saturation.Size) then
                        draggingSat = true
                        UpdateSatVal(input)
                    end
                end
            end)
            table.insert(Library.Connections, satBeginConnection)
            
            local satEndConnection = UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    draggingSat = false
                end
            end)
            table.insert(Library.Connections, satEndConnection)
            
            -- Hue bar handlers
            local hueBeginConnection = UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and Colorpicker.Open and Library.Open then
                    if IsMouseOver(Colorpicker.Hue.Position, Colorpicker.Hue.Size) then
                        draggingHue = true
                        UpdateHue(input)
                    end
                end
            end)
            table.insert(Library.Connections, hueBeginConnection)
            
            local hueEndConnection = UserInputService.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    draggingHue = false
                end
            end)
            table.insert(Library.Connections, hueEndConnection)
            
            -- Mouse move handler
            local moveConnection = UserInputService.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    if draggingSat then
                        UpdateSatVal(input)
                    elseif draggingHue then
                        UpdateHue(input)
                    end
                end
            end)
            table.insert(Library.Connections, moveConnection)
            
            -- Close when clicking outside
            local closeConnection = UserInputService.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 and Colorpicker.Open and Library.Open then
                    if not IsMouseOver(Colorpicker.Window.Position, Colorpicker.Window.Size) and 
                       not IsMouseOver(Colorpicker.Icon.Position, Colorpicker.Icon.Size) then
                        Colorpicker.Open = false
                        Colorpicker:UpdateVisibility(Section.Active and Page.Active)
                    end
                end
            end)
            table.insert(Library.Connections, closeConnection)
            
            table.insert(elements, Colorpicker)
            Library.Flags[Colorpicker.Flag] = Colorpicker.State
            
            return Colorpicker
        end
-- Add first section automatically
        table.insert(Page.Sections, Section)
        if #Page.Sections == 1 then
            Section:Activate()
        end
        
        return Section
    end
    
    -- Add first page automatically
    table.insert(Window.Pages, Page)
    if #Window.Pages == 1 then
        Page:Activate()
    end
    
    return Page
end

-- Toggle UI visibility
function Library:SetOpen(state)
    Library.Open = state
    
    for _, obj in ipairs(Library.Objects) do
        if obj.Visible ~= nil then
            obj.Visible = state
        end
    end
    
    -- Update all page visibilities
    for _, page in ipairs(Library.Pages) do
        if page.Active then
            page:Activate()
        else
            page:Deactivate()
        end
    end
end

-- Change accent color
function Library:ChangeAccent(color)
    Library.Accent = color
    
    -- Update all accent colored objects
    for _, obj in ipairs(Library.Objects) do
        -- This would need to track which objects use accent color
        -- For now, you'd need to manually update them
    end
end

-- Cleanup function
function Library:Unload()
    for _, connection in ipairs(Library.Connections) do
        connection:Disconnect()
    end
    
    for _, obj in ipairs(Library.Objects) do
        obj:Remove()
    end
    
    Library.Objects = {}
    Library.Connections = {}
end

-- UI Toggle keybind (Right Shift)
local toggleConnection
toggleConnection = UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.RightShift then
        Library:SetOpen(not Library.Open)
       end
    end
end)
table.insert(Library.Connections, toggleConnection)

return Library
