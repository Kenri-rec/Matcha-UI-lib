--[[

Vampire UI Library v1.0
Dark Grey Theme with Crimson Accents

UILib.new(<string> identity, <table> watermarkActivity) -> UILib

UILib:Tab(<string> name) -> tabName
UILib:Section(<tabName>, <string> name) -> sectionName
UILib:CreateSettingsTab(<string> customName) -> tabName, sectionName, sectionName

UILib:Checkbox(<tabName>, <sectionName>, <string> label, <boolean> defaultValue, <function> callback)
UILib:Slider(<tabName>, <sectionName>, <string> label, <number> defaultValue, <function> callback, <number> min, <number> max, <number> step, <string> appendix)
UILib:Choice(<tabName>, <sectionName>, <string> label, <table> defaultValue, <function | nil> callback, <table> choices, <boolean> multi)
UILib:Colorpicker(<tabName>, <sectionName>, <string> label, <table[3]> defaultValue, <function | nil> callback)
UILib:Keybind(<tabName>, <sectionName>, <string> label, <string(Keycode)> defaultValue, <function | nil> callback, <string: 'Hold', 'Toggle', 'Always'> mode)
UILib:Button(<tabName>, <sectionName>, <string> label, <function> callback)

UILib:ToggleMenu(boolean)
UILib:ToggleWatermark(boolean)
UILib:Step()
UILib:Destroy()

Example usage:
local UILib = require('vampire-ui')
local myGui = UILib.new('Vampire Executor', {getPing})

local mainTab = myGui:Tab('Main')
local mainSection = myGui:Section(mainTab, 'General')
myGui:Checkbox(mainTab, mainSection, 'Master Switch', false, function(state)
    print('Master:', state)
end)

myGui:CreateSettingsTab()

while running do
    myGui:Step()
    wait(0.0015)
end
myGui:Destroy()

]]

local UILib = {}
UILib.__index = UILib

-- Constants
ESP_FONTSIZE = 7
BLACK = Color3.new(0, 0, 0)

local myPlayer = game:GetService('Players').LocalPlayer
local myMouse = myPlayer:GetMouse()

-- Utility functions
local function clamp(x, a, b)
    return math.max(a, math.min(b, x))
end

local function lerp(a, b, t)
    return a + (b - a) * t
end

local function getMousePos()
    return Vector2.new(myMouse.X, myMouse.Y)
end

local function undrawAll(drawingsTable)
    for _, drawing in pairs(drawingsTable) do
        drawing.Visible = false
    end
end

local function destroyAllDrawings(drawingsTable)
    for _, drawing in ipairs(drawingsTable) do
        drawing:Remove()
    end
end

local function createRoundedCorner(position, radius, color, transparency)
    local corner = Drawing.new('Circle')
    corner.Position = position
    corner.Radius = radius
    corner.Filled = true
    corner.Color = color
    corner.Transparency = transparency
    corner.Visible = true
    corner.NumSides = 20
    return corner
end

local function createRoundedRectangle(x, y, w, h, radius, baseColor, borderColor, crustColor)
    local drawings = {}
    
    -- Main filled rectangle (slightly inset to show borders)
    local base = Drawing.new('Square')
    base.Position = Vector2.new(x + radius, y)
    base.Size = Vector2.new(w - radius * 2, h)
    base.Filled = true
    base.Color = baseColor
    table.insert(drawings, base)
    
    local base2 = Drawing.new('Square')
    base2.Position = Vector2.new(x, y + radius)
    base2.Size = Vector2.new(w, h - radius * 2)
    base2.Filled = true
    base2.Color = baseColor
    table.insert(drawings, base2)
    
    -- Corner circles for rounded effect
    local corners = {
        {x + radius, y + radius},         -- Top Left
        {x + w - radius, y + radius},     -- Top Right  
        {x + radius, y + h - radius},     -- Bottom Left
        {x + w - radius, y + h - radius}  -- Bottom Right
    }
    
    for _, cornerPos in ipairs(corners) do
        local corner = createRoundedCorner(Vector2.new(cornerPos[1], cornerPos[2]), radius, baseColor, 0)
        table.insert(drawings, corner)
    end
    
    -- Borders (simplified for now)
    local border = Drawing.new('Square')
    border.Position = Vector2.new(x, y)
    border.Size = Vector2.new(w, h)
    border.Filled = false
    border.Thickness = 1
    border.Color = borderColor
    table.insert(drawings, border)
    
    return drawings
end

function UILib.new(name, watermarkActivity)
    repeat
        wait(1/9999)
    until isrbxactive()

    local self = setmetatable({}, UILib)

    -- Input system (same as x11)
    self._inputs = {
        ['m1'] = { id = 0x01, held = false, click = false },
        ['m2'] = { id = 0x02, held = false, click = false },
        -- ... (include all the same keybinds as x11)
        ['f1'] = { id = 0x70, held = false, click = false },
        ['f2'] = { id = 0x71, held = false, click = false },
    }

    -- Vampire Dark Grey Theme
    self._color_accent = Color3.fromRGB(255, 46, 76)    -- Crimson #FF2E4C
    self._color_text = Color3.fromRGB(240, 240, 240)    -- Off-white
    self._color_base = Color3.fromRGB(45, 45, 45)       -- Dark grey #2D2D2D
    self._color_surface = Color3.fromRGB(35, 35, 35)    -- Slightly darker
    self._color_border = Color3.fromRGB(25, 25, 25)     -- Dark border
    self._color_crust = Color3.fromRGB(15, 15, 15)      -- Darkest

    -- Window settings
    self.windowWidth = 500
    self.windowHeight = 500
    self.sidebarWidth = 110
    
    -- Center the window initially
    local screenSize = workspace.CurrentCamera.ViewportSize
    self.x = (screenSize.X - self.windowWidth) / 2
    self.y = (screenSize.Y - self.windowHeight) / 2
    
    self._active_tab = nil
    self._open = true
    self._watermark = true
    self._base_opacity = 0
    self._dragging = false
    self._drag_offset = Vector2.new(0, 0)
    self._active_dropdown = nil
    self._active_colorpicker = nil
    self._tick = os.clock()

    -- User settings
    self.identity = name
    self._watermark_activity = watermarkActivity or {}

    -- Styling
    self._title_h = 25
    self._tab_h = 25
    self._padding = 8
    self._corner_radius = 4

    -- Create main window with rounded corners
    local windowDrawings = createRoundedRectangle(
        self.x, self.y, 
        self.windowWidth, self.windowHeight,
        self._corner_radius,
        self._color_base,
        self._color_border,
        self._color_crust
    )

    -- Title bar
    local titleBar = Drawing.new('Square')
    titleBar.Position = Vector2.new(self.x, self.y)
    titleBar.Size = Vector2.new(self.windowWidth, self._title_h)
    titleBar.Filled = true
    titleBar.Color = self._color_surface

    local titleText = Drawing.new('Text')
    titleText.Text = self.identity
    titleText.Outline = true
    titleText.Color = self._color_text

    -- Sidebar background
    local sidebar = Drawing.new('Square')
    sidebar.Position = Vector2.new(self.x, self.y + self._title_h)
    sidebar.Size = Vector2.new(self.sidebarWidth, self.windowHeight - self._title_h)
    sidebar.Filled = true
    sidebar.Color = self._color_surface

    -- Watermark
    local watermarkBase = Drawing.new('Square')
    watermarkBase.Filled = true
    watermarkBase.Color = self._color_base

    local watermarkText = Drawing.new('Text')
    watermarkText.Text = name
    watermarkText.Outline = true
    watermarkText.Color = self._color_text

    -- Combine all drawings
    for _, drawing in ipairs(windowDrawings) do
        table.insert(windowDrawings, drawing)
    end
    
    table.insert(windowDrawings, titleBar)
    table.insert(windowDrawings, titleText)
    table.insert(windowDrawings, sidebar)
    table.insert(windowDrawings, watermarkBase)
    table.insert(windowDrawings, watermarkText)

    self._tree = {
        ['_tabs'] = {},
        ['_drawings'] = windowDrawings
    }

    -- Create default tabs
    local defaultTabs = {"Main", "Example", "Example", "Settings"}
    for _, tabName in ipairs(defaultTabs) do
        self:Tab(tabName)
    end

    return self
end

function UILib._GetTextBounds(str)
    return #str * ESP_FONTSIZE, ESP_FONTSIZE
end

function UILib._IsMouseWithinBounds(origin, size)
    local mousePos = getMousePos()
    return mousePos.x >= origin.x and mousePos.x <= origin.x + size.x and 
           mousePos.y >= origin.y and mousePos.y <= origin.y + size.y
end

function UILib:Tab(name)
    local tabText = Drawing.new('Text')
    tabText.Color = self._color_text
    tabText.Outline = true
    tabText.Text = name

    local tabHighlight = Drawing.new('Square')
    tabHighlight.Filled = true
    tabHighlight.Color = self._color_base
    tabHighlight.Visible = false

    local newTab = {
        ['name'] = name,
        ['_sections'] = {},
        ['_drawings'] = { tabText, tabHighlight }
    }

    table.insert(self._tree['_tabs'], newTab)

    if self._active_tab == nil then
        self._active_tab = name
    end

    return name
end

function UILib:Section(tabName, name)
    for _, tab in ipairs(self._tree['_tabs']) do
        if tab['name'] == tabName then
            local sectionTitle = Drawing.new('Text')
            sectionTitle.Text = name
            sectionTitle.Outline = true
            sectionTitle.Color = self._color_text

            local section = {
                ['name'] = name,
                ['_items'] = {},
                ['_drawings'] = { sectionTitle }
            }

            table.insert(tab._sections, section)
            return name
        end
    end
end

function UILib:_AddToSection(tabName, sectionName, itemType, value, callback, drawings, meta)
    for _, tab in pairs(self._tree._tabs) do
        if tab.name == tabName then
            for _, section in pairs(tab._sections) do
                if section.name == sectionName then
                    local item = {
                        ['type'] = itemType,
                        ['value'] = value,
                        ['callback'] = callback,
                        ['_drawings'] = drawings
                    }

                    if meta then
                        for key, val in pairs(meta) do
                            item[key] = val
                        end
                    end

                    table.insert(section._items, item)
                    return
                end
            end
        end
    end
end

-- Control implementations (Checkbox, Slider, etc.)
function UILib:Checkbox(tabName, sectionName, label, defaultValue, callback)
    local outline = Drawing.new('Square')
    outline.Color = self._color_border
    outline.Thickness = 1
    outline.Filled = false

    local check = Drawing.new('Square')
    check.Color = self._color_accent
    check.Filled = true

    local text = Drawing.new('Text')
    text.Color = self._color_text
    text.Outline = true
    text.Text = label

    self:_AddToSection(tabName, sectionName, 'checkbox', defaultValue, callback, {
        outline, check, text
    })
end

function UILib:Slider(tabName, sectionName, label, defaultValue, callback, min, max, step, appendix)
    local outline = Drawing.new('Square')
    outline.Color = self._color_border
    outline.Filled = true

    local fill = Drawing.new('Square')
    fill.Color = self._color_accent
    fill.Filled = true

    local text = Drawing.new('Text')
    text.Color = self._color_text
    text.Outline = true
    text.Text = label

    local valueText = Drawing.new('Text')
    valueText.Color = self._color_text
    valueText.Outline = true

    self:_AddToSection(tabName, sectionName, 'slider', defaultValue, callback, {
        outline, fill, text, valueText
    }, {
        ['min'] = min,
        ['max'] = max,
        ['step'] = step,
        ['appendix'] = appendix
    })
end

function UILib:Button(tabName, sectionName, label, callback)
    local outline = Drawing.new('Square')
    outline.Color = self._color_border
    outline.Thickness = 1
    outline.Filled = false

    local fill = Drawing.new('Square')
    fill.Color = self._color_surface
    fill.Filled = true

    local text = Drawing.new('Text')
    text.Color = self._color_text
    text.Outline = true
    text.Text = label

    self:_AddToSection(tabName, sectionName, 'button', nil, callback, {
        outline, fill, text
    })
end

-- Core methods
function UILib:ToggleWatermark(state)
    self._watermark = state
end

function UILib:ToggleMenu(state)
    self._open = state
end

function UILib:IsMenuOpen()
    return self._open
end

function UILib:CreateSettingsTab()
    -- Implementation similar to x11 but with our theme
    local menuTab = self:Tab('Settings')
    local menuSettings = self:Section(menuTab, 'Config')
    
    self:Keybind(menuTab, menuSettings, 'Toggle Menu', 'f1', function(state)
        self:ToggleMenu(state)
    end, 'Toggle')
    
    self:Checkbox(menuTab, menuSettings, 'Watermark', true, function(state)
        self:ToggleWatermark(state)
    end)
    
    return menuTab, menuSettings
end

function UILib:Step()
    local deltaTime = math.max(os.clock() - self._tick, 0.0035)
    local mousePos = getMousePos()

    -- Input handling (similar to x11)
    for keycode, inputData in pairs(self._inputs) do
        local keycodeId = inputData['id']
        local interacted = iskeypressed(keycodeId)
        if isrbxactive() and interacted then
            if inputData['held'] == false and inputData['click'] == false then
                self._inputs[keycode]['click'] = true
            else
                self._inputs[keycode]['click'] = false
            end
            self._inputs[keycode]['held'] = true
        else
            self._inputs[keycode]['held'] = false
        end
    end

    local menuOpen = self._open
    local clickFrame = menuOpen and self._inputs['m1'].click
    local m1Held = menuOpen and self._inputs['m1'].held

    -- Opacity animation
    self._base_opacity = clamp(lerp(self._base_opacity, menuOpen and 1 or 0, deltaTime * 11), 0, 1)
    local childrenVisible = self._base_opacity > 0.22

    setrobloxinput(not menuOpen)

    -- Update main window position
    local baseDrawings = self._tree['_drawings']
    for _, drawing in ipairs(baseDrawings) do
        drawing.Transparency = 1 - self._base_opacity
        drawing.Visible = childrenVisible
    end

    -- Update title bar and sidebar positions
    baseDrawings[#baseDrawings - 4].Position = Vector2.new(self.x, self.y) -- titleBar
    baseDrawings[#baseDrawings - 3].Position = Vector2.new(self.x + 8, self.y + 8) -- titleText
    baseDrawings[#baseDrawings - 2].Position = Vector2.new(self.x, self.y + self._title_h) -- sidebar

    -- Dragging logic
    local titleOrigin = Vector2.new(self.x, self.y)
    local titleSize = Vector2.new(self.windowWidth, self._title_h)

    if self._IsMouseWithinBounds(titleOrigin, titleSize) then
        if clickFrame then
            self._dragging = true
            self._drag_offset = mousePos - titleOrigin
        end
    end

    if self._dragging then
        if m1Held then
            self.x = mousePos.x - self._drag_offset.x
            self.y = mousePos.y - self._drag_offset.y
        else
            self._dragging = false
        end
        clickFrame = false
    end

    -- Draw tabs in sidebar
    for tabIndex, tab in ipairs(self._tree['_tabs']) do
        local tabName = tab['name']
        local tabDraws = tab['_drawings']
        local isActive = self._active_tab == tabName

        local tabText = tabDraws[1]
        local tabHighlight = tabDraws[2]

        local tabY = self.y + self._title_h + (tabIndex - 1) * self._tab_h + self._padding
        
        tabText.Position = Vector2.new(self.x + self._padding, tabY)
        tabText.Transparency = self._base_opacity
        tabText.Visible = childrenVisible
        tabText.Color = isActive and self._color_accent or self._color_text

        tabHighlight.Position = Vector2.new(self.x, tabY - 2)
        tabHighlight.Size = Vector2.new(self.sidebarWidth, self._tab_h)
        tabHighlight.Transparency = self._base_opacity
        tabHighlight.Visible = isActive and childrenVisible

        -- Tab click handling
        local tabBounds = Vector2.new(self.x, tabY - 2)
        local tabSize = Vector2.new(self.sidebarWidth, self._tab_h)
        if clickFrame and self._IsMouseWithinBounds(tabBounds, tabSize) then
            self._active_tab = tabName
        end
    end

    -- Draw active tab's sections and items
    for _, tab in ipairs(self._tree['_tabs']) do
        if tab['name'] == self._active_tab then
            local contentX = self.x + self.sidebarWidth + self._padding
            local contentY = self.y + self._title_h + self._padding
            local contentWidth = self.windowWidth - self.sidebarWidth - self._padding * 2

            for sectionIndex, section in ipairs(tab['_sections']) do
                local sectionTitle = section['_drawings'][1]
                local sectionY = contentY + (sectionIndex - 1) * 120

                sectionTitle.Position = Vector2.new(contentX, sectionY)
                sectionTitle.Transparency = self._base_opacity
                sectionTitle.Visible = childrenVisible

                -- Draw section items
                local itemY = sectionY + 20
                for _, item in ipairs(section['_items']) do
                    for _, drawing in ipairs(item['_drawings']) do
                        drawing.Transparency = self._base_opacity
                        drawing.Visible = childrenVisible
                    end

                    -- Position items (simplified for foundation)
                    if item.type == 'checkbox' then
                        item['_drawings'][1].Position = Vector2.new(contentX, itemY) -- outline
                        item['_drawings'][2].Position = Vector2.new(contentX + 2, itemY + 2) -- check
                        item['_drawings'][3].Position = Vector2.new(contentX + 20, itemY) -- text
                        itemY = itemY + 25
                    end
                end
            end
        end
    end

    self._tick = os.clock()
end

function UILib:Destroy()
    -- Clean up all drawings
    for _, drawing in pairs(self._tree['_drawings']) do
        drawing:Remove()
    end

    for _, tab in pairs(self._tree['_tabs']) do
        for _, drawing in pairs(tab['_drawings']) do
            drawing:Remove()
        end
        for _, section in pairs(tab['_sections']) do
            for _, drawing in pairs(section['_drawings']) do
                drawing:Remove()
            end
            for _, item in pairs(section['_items']) do
                for _, drawing in pairs(item['_drawings']) do
                    drawing:Remove()
                end
            end
        end
    end

    setrobloxinput(true)
end

-- Placeholder for missing controls (to be implemented)
function UILib:Choice(tabName, sectionName, label, defaultValue, callback, choices, multi) end
function UILib:Colorpicker(tabName, sectionName, label, defaultValue, callback) end
function UILib:Keybind(tabName, sectionName, label, defaultValue, callback, mode) end

return UILib
